// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IntakeFeature : Xunit.IUseFixture<IntakeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        public IntakeFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Intake", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(IntakeFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Intake")]
        [Xunit.TraitAttribute("Description", "User must be authorized to perform intake")]
        public virtual void UserMustBeAuthorizedToPerformIntake()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User must be authorized to perform intake", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("The user is logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.And("The user has intake permission", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("The user attempts to perform intake", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("the intake screen should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Intake")]
        [Xunit.TraitAttribute("Description", "User must specify animal type during Intake")]
        public virtual void UserMustSpecifyAnimalTypeDuringIntake()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User must specify animal type during Intake", new string[] {
                        "ignore"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("the user is an authorized to perform intake", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.When("a new animal is taken into the rescue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("the animal\'s type must be recorded from a pre-populated list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Intake")]
        [Xunit.TraitAttribute("Description", "User is not authorized to perform intake")]
        public virtual void UserIsNotAuthorizedToPerformIntake()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User is not authorized to perform intake", new string[] {
                        "ignore"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("The user is logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.And("The user does not have intake permission", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("The user attempts to perform intake", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("A user-not-authorized error message should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Intake")]
        [Xunit.TraitAttribute("Description", "Animal type is not selected")]
        public virtual void AnimalTypeIsNotSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Animal type is not selected", new string[] {
                        "ignore"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("The user is authorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.And("The user is at the intake screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("The user has not selected an animal type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("The screen cannot be submitted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Intake")]
        [Xunit.TraitAttribute("Description", "Animal type is selected")]
        public virtual void AnimalTypeIsSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Animal type is selected", new string[] {
                        "ignore"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("The user is authorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.And("The user is at the intake screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("The user has selected an animal type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("The screen can be submitted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                IntakeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                IntakeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
