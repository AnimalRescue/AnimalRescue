/*
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Dog : IEquatable<Dog>
    { 
        /// <summary>
        /// Gets or Sets BaseInfo
        /// </summary>
        [Required]
        [DataMember(Name="baseInfo")]
        public BaseAnimalInfo BaseInfo { get; set; }

        /// <summary>
        /// Gets or Sets Breed
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DogBreeds
        {
            /// <summary>
            /// Enum UndeterminedEnum for Undetermined
            /// </summary>
            [EnumMember(Value = "Undetermined")]
            UndeterminedEnum = 0,
            /// <summary>
            /// Enum AkitaEnum for Akita
            /// </summary>
            [EnumMember(Value = "Akita")]
            AkitaEnum = 1,
            /// <summary>
            /// Enum AmericanBulldogEnum for American Bulldog
            /// </summary>
            [EnumMember(Value = "American Bulldog")]
            AmericanBulldogEnum = 2,
            /// <summary>
            /// Enum AmericanEskimoDogEnum for American Eskimo Dog
            /// </summary>
            [EnumMember(Value = "American Eskimo Dog")]
            AmericanEskimoDogEnum = 3,
            /// <summary>
            /// Enum AustralianCattleDogEnum for Australian Cattle Dog
            /// </summary>
            [EnumMember(Value = "Australian Cattle Dog")]
            AustralianCattleDogEnum = 4,
            /// <summary>
            /// Enum AustralianShepherdEnum for Australian Shepherd
            /// </summary>
            [EnumMember(Value = "Australian Shepherd")]
            AustralianShepherdEnum = 5,
            /// <summary>
            /// Enum BasenjiEnum for Basenji
            /// </summary>
            [EnumMember(Value = "Basenji")]
            BasenjiEnum = 6,
            /// <summary>
            /// Enum BassetHoundEnum for Basset Hound
            /// </summary>
            [EnumMember(Value = "Basset Hound")]
            BassetHoundEnum = 7,
            /// <summary>
            /// Enum BeagleEnum for Beagle
            /// </summary>
            [EnumMember(Value = "Beagle")]
            BeagleEnum = 8,
            /// <summary>
            /// Enum BerneseMountainDogEnum for Bernese Mountain Dog
            /// </summary>
            [EnumMember(Value = "Bernese Mountain Dog")]
            BerneseMountainDogEnum = 9,
            /// <summary>
            /// Enum BichonFriseEnum for Bichon Frise
            /// </summary>
            [EnumMember(Value = "Bichon Frise")]
            BichonFriseEnum = 10,
            /// <summary>
            /// Enum BloodhoundEnum for Bloodhound
            /// </summary>
            [EnumMember(Value = "Bloodhound")]
            BloodhoundEnum = 11,
            /// <summary>
            /// Enum BorderCollieEnum for Border Collie
            /// </summary>
            [EnumMember(Value = "Border Collie")]
            BorderCollieEnum = 12,
            /// <summary>
            /// Enum BostonTerrierEnum for Boston Terrier
            /// </summary>
            [EnumMember(Value = "Boston Terrier")]
            BostonTerrierEnum = 13,
            /// <summary>
            /// Enum BoxerScottishEnum for Boxer Scottish
            /// </summary>
            [EnumMember(Value = "Boxer Scottish")]
            BoxerScottishEnum = 14,
            /// <summary>
            /// Enum BrittanySpanielEnum for Brittany Spaniel
            /// </summary>
            [EnumMember(Value = "Brittany Spaniel")]
            BrittanySpanielEnum = 15,
            /// <summary>
            /// Enum BullTerrierEnum for Bull Terrier
            /// </summary>
            [EnumMember(Value = "Bull Terrier")]
            BullTerrierEnum = 16,
            /// <summary>
            /// Enum BulldogEnum for Bulldog
            /// </summary>
            [EnumMember(Value = "Bulldog")]
            BulldogEnum = 17,
            /// <summary>
            /// Enum BullmastiffEnum for Bullmastiff
            /// </summary>
            [EnumMember(Value = "Bullmastiff")]
            BullmastiffEnum = 18,
            /// <summary>
            /// Enum CatahoulaLeopardDogEnum for Catahoula Leopard Dog
            /// </summary>
            [EnumMember(Value = "Catahoula Leopard Dog")]
            CatahoulaLeopardDogEnum = 19,
            /// <summary>
            /// Enum CavalierKingCharlesSpanielEnum for Cavalier King Charles Spaniel
            /// </summary>
            [EnumMember(Value = "Cavalier King Charles Spaniel")]
            CavalierKingCharlesSpanielEnum = 20,
            /// <summary>
            /// Enum ChihuahuaEnum for Chihuahua
            /// </summary>
            [EnumMember(Value = "Chihuahua")]
            ChihuahuaEnum = 21,
            /// <summary>
            /// Enum ChineseCrestedEnum for Chinese Crested
            /// </summary>
            [EnumMember(Value = "Chinese Crested")]
            ChineseCrestedEnum = 22,
            /// <summary>
            /// Enum ChowChowEnum for Chow Chow
            /// </summary>
            [EnumMember(Value = "Chow Chow")]
            ChowChowEnum = 23,
            /// <summary>
            /// Enum CockapooEnum for Cockapoo
            /// </summary>
            [EnumMember(Value = "Cockapoo")]
            CockapooEnum = 24,
            /// <summary>
            /// Enum CockerSpanielEnum for Cocker Spaniel
            /// </summary>
            [EnumMember(Value = "Cocker Spaniel")]
            CockerSpanielEnum = 25,
            /// <summary>
            /// Enum CollieEnum for Collie
            /// </summary>
            [EnumMember(Value = "Collie")]
            CollieEnum = 26,
            /// <summary>
            /// Enum DalmatianEnum for Dalmatian
            /// </summary>
            [EnumMember(Value = "Dalmatian")]
            DalmatianEnum = 27,
            /// <summary>
            /// Enum DashshundEnum for Dashshund
            /// </summary>
            [EnumMember(Value = "Dashshund")]
            DashshundEnum = 28,
            /// <summary>
            /// Enum DobermanPinscherEnum for Doberman Pinscher
            /// </summary>
            [EnumMember(Value = "Doberman Pinscher")]
            DobermanPinscherEnum = 29,
            /// <summary>
            /// Enum EnglishSetterEnum for English Setter
            /// </summary>
            [EnumMember(Value = "English Setter")]
            EnglishSetterEnum = 30,
            /// <summary>
            /// Enum FlatCoatedRetrieverEnum for Flat-Coated Retriever
            /// </summary>
            [EnumMember(Value = "Flat-Coated Retriever")]
            FlatCoatedRetrieverEnum = 31,
            /// <summary>
            /// Enum FoxTerrierEnum for Fox Terrier
            /// </summary>
            [EnumMember(Value = "Fox Terrier")]
            FoxTerrierEnum = 32,
            /// <summary>
            /// Enum FrenchBulldogEnum for French Bulldog
            /// </summary>
            [EnumMember(Value = "French Bulldog")]
            FrenchBulldogEnum = 33,
            /// <summary>
            /// Enum GermanShepherdEnum for German Shepherd
            /// </summary>
            [EnumMember(Value = "German Shepherd")]
            GermanShepherdEnum = 34,
            /// <summary>
            /// Enum GermanShorthairedPointerEnum for German Shorthaired Pointer
            /// </summary>
            [EnumMember(Value = "German Shorthaired Pointer")]
            GermanShorthairedPointerEnum = 35,
            /// <summary>
            /// Enum GoldenRetrieverEnum for Golden Retriever
            /// </summary>
            [EnumMember(Value = "Golden Retriever")]
            GoldenRetrieverEnum = 36,
            /// <summary>
            /// Enum GoldendoodleEnum for Goldendoodle
            /// </summary>
            [EnumMember(Value = "Goldendoodle")]
            GoldendoodleEnum = 37,
            /// <summary>
            /// Enum GreatDaneEnum for Great Dane
            /// </summary>
            [EnumMember(Value = "Great Dane")]
            GreatDaneEnum = 38,
            /// <summary>
            /// Enum GreatPyreneesEnum for Great Pyrenees
            /// </summary>
            [EnumMember(Value = "Great Pyrenees")]
            GreatPyreneesEnum = 39,
            /// <summary>
            /// Enum GreyhoundEnum for Greyhound
            /// </summary>
            [EnumMember(Value = "Greyhound")]
            GreyhoundEnum = 40,
            /// <summary>
            /// Enum HavaneseEnum for Havanese
            /// </summary>
            [EnumMember(Value = "Havanese")]
            HavaneseEnum = 41,
            /// <summary>
            /// Enum IrishSetterEnum for Irish Setter
            /// </summary>
            [EnumMember(Value = "Irish Setter")]
            IrishSetterEnum = 42,
            /// <summary>
            /// Enum JackRussellTerrierEnum for Jack Russell Terrier
            /// </summary>
            [EnumMember(Value = "Jack Russell Terrier")]
            JackRussellTerrierEnum = 43,
            /// <summary>
            /// Enum LabradoodleEnum for Labradoodle
            /// </summary>
            [EnumMember(Value = "Labradoodle")]
            LabradoodleEnum = 44        }

        /// <summary>
        /// Gets or Sets Breed
        /// </summary>
        [Required]
        [DataMember(Name="breed")]
        public DogBreeds? Breed { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DogColors
        {
            /// <summary>
            /// Enum BlackEnum for Black
            /// </summary>
            [EnumMember(Value = "Black")]
            BlackEnum = 0,
            /// <summary>
            /// Enum BlackAndWhiteEnum for Black and White
            /// </summary>
            [EnumMember(Value = "Black and White")]
            BlackAndWhiteEnum = 1,
            /// <summary>
            /// Enum WhiteEnum for White
            /// </summary>
            [EnumMember(Value = "White")]
            WhiteEnum = 2,
            /// <summary>
            /// Enum BrindleEnum for Brindle
            /// </summary>
            [EnumMember(Value = "Brindle")]
            BrindleEnum = 3,
            /// <summary>
            /// Enum TriColorEnum for Tri-Color
            /// </summary>
            [EnumMember(Value = "Tri-Color")]
            TriColorEnum = 4,
            /// <summary>
            /// Enum BrownEnum for Brown
            /// </summary>
            [EnumMember(Value = "Brown")]
            BrownEnum = 5,
            /// <summary>
            /// Enum BrownAndWhiteEnum for Brown and White
            /// </summary>
            [EnumMember(Value = "Brown and White")]
            BrownAndWhiteEnum = 6,
            /// <summary>
            /// Enum GrayBlueEnum for Gray/Blue
            /// </summary>
            [EnumMember(Value = "Gray/Blue")]
            GrayBlueEnum = 7,
            /// <summary>
            /// Enum GrayAndWhiteEnum for Gray and White
            /// </summary>
            [EnumMember(Value = "Gray and White")]
            GrayAndWhiteEnum = 8,
            /// <summary>
            /// Enum RedCinnamonEnum for Red/Cinnamon
            /// </summary>
            [EnumMember(Value = "Red/Cinnamon")]
            RedCinnamonEnum = 9,
            /// <summary>
            /// Enum BlackAndTanEnum for Black and Tan
            /// </summary>
            [EnumMember(Value = "Black and Tan")]
            BlackAndTanEnum = 10,
            /// <summary>
            /// Enum TanEnum for Tan
            /// </summary>
            [EnumMember(Value = "Tan")]
            TanEnum = 11,
            /// <summary>
            /// Enum TanAndWhiteEnum for Tan and White
            /// </summary>
            [EnumMember(Value = "Tan and White")]
            TanAndWhiteEnum = 12        }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [Required]
        [DataMember(Name="color")]
        public DogColors? Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dog {\n");
            sb.Append("  BaseInfo: ").Append(BaseInfo).Append("\n");
            sb.Append("  Breed: ").Append(Breed).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Dog)obj);
        }

        /// <summary>
        /// Returns true if Dog instances are equal
        /// </summary>
        /// <param name="other">Instance of Dog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dog other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BaseInfo == other.BaseInfo ||
                    BaseInfo != null &&
                    BaseInfo.Equals(other.BaseInfo)
                ) && 
                (
                    Breed == other.Breed ||
                    Breed != null &&
                    Breed.Equals(other.Breed)
                ) && 
                (
                    Color == other.Color ||
                    Color != null &&
                    Color.Equals(other.Color)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BaseInfo != null)
                    hashCode = hashCode * 59 + BaseInfo.GetHashCode();
                    if (Breed != null)
                    hashCode = hashCode * 59 + Breed.GetHashCode();
                    if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Dog left, Dog right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Dog left, Dog right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
