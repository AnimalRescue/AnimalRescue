/*
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AvailabilityBlock : IEquatable<AvailabilityBlock>
    { 
        /// <summary>
        /// Gets or Sets DayOfWeek
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DayOfWeekSelect
        {
            /// <summary>
            /// Enum MondayEnum for Monday
            /// </summary>
            [EnumMember(Value = "Monday")]
            MondayEnum = 0,
            /// <summary>
            /// Enum TuesdayEnum for Tuesday
            /// </summary>
            [EnumMember(Value = "Tuesday")]
            TuesdayEnum = 1,
            /// <summary>
            /// Enum WednesdayEnum for Wednesday
            /// </summary>
            [EnumMember(Value = "Wednesday")]
            WednesdayEnum = 2,
            /// <summary>
            /// Enum ThursdayEnum for Thursday
            /// </summary>
            [EnumMember(Value = "Thursday")]
            ThursdayEnum = 3,
            /// <summary>
            /// Enum FridayEnum for Friday
            /// </summary>
            [EnumMember(Value = "Friday")]
            FridayEnum = 4,
            /// <summary>
            /// Enum SaturdayEnum for Saturday
            /// </summary>
            [EnumMember(Value = "Saturday")]
            SaturdayEnum = 5,
            /// <summary>
            /// Enum SundayEnum for Sunday
            /// </summary>
            [EnumMember(Value = "Sunday")]
            SundayEnum = 6        }

        /// <summary>
        /// Gets or Sets DayOfWeek
        /// </summary>
        [DataMember(Name="dayOfWeek")]
        public DayOfWeekSelect? DayOfWeek { get; set; }

        /// <summary>
        /// Gets or Sets Intervals
        /// </summary>
        [Required]
        [DataMember(Name="intervals")]
        public List<TimeInterval> Intervals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailabilityBlock {\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  Intervals: ").Append(Intervals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AvailabilityBlock)obj);
        }

        /// <summary>
        /// Returns true if AvailabilityBlock instances are equal
        /// </summary>
        /// <param name="other">Instance of AvailabilityBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailabilityBlock other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DayOfWeek == other.DayOfWeek ||
                    DayOfWeek != null &&
                    DayOfWeek.Equals(other.DayOfWeek)
                ) && 
                (
                    Intervals == other.Intervals ||
                    Intervals != null &&
                    Intervals.SequenceEqual(other.Intervals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DayOfWeek != null)
                    hashCode = hashCode * 59 + DayOfWeek.GetHashCode();
                    if (Intervals != null)
                    hashCode = hashCode * 59 + Intervals.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AvailabilityBlock left, AvailabilityBlock right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AvailabilityBlock left, AvailabilityBlock right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
