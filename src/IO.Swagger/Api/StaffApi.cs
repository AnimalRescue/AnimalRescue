/* 
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IStaffApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// adds a Building at the specified Location
        /// </summary>
        /// <remarks>
        /// Adds a new Building to the specified Location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Building to update</param>
        /// <param name="locationId"></param>
        /// <returns></returns>
        void AddBuildingToLocation (Building body, Guid? locationId);

        /// <summary>
        /// adds a Building at the specified Location
        /// </summary>
        /// <remarks>
        /// Adds a new Building to the specified Location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Building to update</param>
        /// <param name="locationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddBuildingToLocationWithHttpInfo (Building body, Guid? locationId);
        /// <summary>
        /// adds an inventory item
        /// </summary>
        /// <remarks>
        /// Adds an item to the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Inventory item to add (optional)</param>
        /// <returns></returns>
        void AddInventory (InventoryItem body = null);

        /// <summary>
        /// adds an inventory item
        /// </summary>
        /// <remarks>
        /// Adds an item to the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Inventory item to add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddInventoryWithHttpInfo (InventoryItem body = null);
        /// <summary>
        /// adds a Kennel to the rescue
        /// </summary>
        /// <remarks>
        /// Adds a new Kennel to the Rescue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Kennel to add to the Rescue</param>
        /// <returns></returns>
        void AddKennel (Kennel body);

        /// <summary>
        /// adds a Kennel to the rescue
        /// </summary>
        /// <remarks>
        /// Adds a new Kennel to the Rescue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Kennel to add to the Rescue</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddKennelWithHttpInfo (Kennel body);
        /// <summary>
        /// creates a Kennel in the specified Room
        /// </summary>
        /// <remarks>
        /// Adds a new Kennel to the specified Room
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns></returns>
        void AddKennelToRoom (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId);

        /// <summary>
        /// creates a Kennel in the specified Room
        /// </summary>
        /// <remarks>
        /// Adds a new Kennel to the specified Room
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddKennelToRoomWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId);
        /// <summary>
        /// creates a Room in the specified Building
        /// </summary>
        /// <remarks>
        /// Adds a new Room to the specified Location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns></returns>
        void AddRoomToBuilding (Room body, Guid? locationId, Guid? buildingId);

        /// <summary>
        /// creates a Room in the specified Building
        /// </summary>
        /// <remarks>
        /// Adds a new Room to the specified Location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddRoomToBuildingWithHttpInfo (Room body, Guid? locationId, Guid? buildingId);
        /// <summary>
        /// creates a new Cat
        /// </summary>
        /// <remarks>
        /// adds a Cat with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Cat object with new id (optional)</param>
        /// <returns></returns>
        void CreateCat (Cat body = null);

        /// <summary>
        /// creates a new Cat
        /// </summary>
        /// <remarks>
        /// adds a Cat with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Cat object with new id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateCatWithHttpInfo (Cat body = null);
        /// <summary>
        /// creates a new Contact
        /// </summary>
        /// <remarks>
        /// adds a Contact with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Contact object with new id (optional)</param>
        /// <returns></returns>
        void CreateContact (Contact body = null);

        /// <summary>
        /// creates a new Contact
        /// </summary>
        /// <remarks>
        /// adds a Contact with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Contact object with new id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateContactWithHttpInfo (Contact body = null);
        /// <summary>
        /// creates a new Dog
        /// </summary>
        /// <remarks>
        /// adds a Dog with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Dog object with new id (optional)</param>
        /// <returns></returns>
        void CreateDog (Dog body = null);

        /// <summary>
        /// creates a new Dog
        /// </summary>
        /// <remarks>
        /// adds a Dog with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Dog object with new id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateDogWithHttpInfo (Dog body = null);
        /// <summary>
        /// creates new Donor with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Donor
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Donor object</param>
        /// <returns></returns>
        void CreateDonor (Donor body);

        /// <summary>
        /// creates new Donor with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Donor
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Donor object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateDonorWithHttpInfo (Donor body);
        /// <summary>
        /// creates new Foster with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Foster
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Foster object</param>
        /// <returns></returns>
        void CreateFoster (Foster body);

        /// <summary>
        /// creates new Foster with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Foster
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Foster object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateFosterWithHttpInfo (Foster body);
        /// <summary>
        /// creates a new Organization
        /// </summary>
        /// <remarks>
        /// adds a Organization with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Organization object with new id (optional)</param>
        /// <returns></returns>
        void CreateOrganization (Organization body = null);

        /// <summary>
        /// creates a new Organization
        /// </summary>
        /// <remarks>
        /// adds a Organization with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Organization object with new id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateOrganizationWithHttpInfo (Organization body = null);
        /// <summary>
        /// creates new Volunteer with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Volunteer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Volunteer object</param>
        /// <returns></returns>
        void CreateVolunteer (Volunteer body);

        /// <summary>
        /// creates new Volunteer with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Volunteer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Volunteer object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateVolunteerWithHttpInfo (Volunteer body);
        /// <summary>
        /// deletes a Building from a Location by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Building at a Location by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns></returns>
        void DeleteBuildingAtLocationById (Guid? locationId, Guid? buildingId);

        /// <summary>
        /// deletes a Building from a Location by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Building at a Location by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBuildingAtLocationByIdWithHttpInfo (Guid? locationId, Guid? buildingId);
        /// <summary>
        /// deletes a Cat by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteCatById (Guid? id);

        /// <summary>
        /// deletes a Cat by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCatByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Contact by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Contact by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContactById (Guid? id);

        /// <summary>
        /// deletes a Contact by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Contact by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Dog by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteDogById (Guid? id);

        /// <summary>
        /// deletes a Dog by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDogByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Donor by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteDonorById (Guid? id);

        /// <summary>
        /// deletes a Donor by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDonorByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Foster by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteFosterById (Guid? id);

        /// <summary>
        /// deletes a Foster by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFosterByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Kennel by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Kennel by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteKennelById (Guid? id);

        /// <summary>
        /// deletes a Kennel by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Kennel by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteKennelByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Kennel by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Kennel from a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns></returns>
        void DeleteKennelFromRoomById (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);

        /// <summary>
        /// deletes a Kennel by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Kennel from a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteKennelFromRoomByIdWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);
        /// <summary>
        /// deletes a Organization by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteOrganizationById (Guid? id);

        /// <summary>
        /// deletes a Organization by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrganizationByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Room by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Building at a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns></returns>
        void DeleteRoomFromBuildingById (Guid? locationId, Guid? buildingId, Guid? roomId);

        /// <summary>
        /// deletes a Room by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Building at a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRoomFromBuildingByIdWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId);
        /// <summary>
        /// deletes a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteVolunteerById (Guid? id);

        /// <summary>
        /// deletes a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVolunteerByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// reports whether the API is up and running
        /// </summary>
        /// <remarks>
        /// used to check on the api status, but returns no content
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetApiHealth ();

        /// <summary>
        /// reports whether the API is up and running
        /// </summary>
        /// <remarks>
        /// used to check on the api status, but returns no content
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetApiHealthWithHttpInfo ();
        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Location</returns>
        Location GetBuildingAtLocationById (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> GetBuildingAtLocationByIdWithHttpInfo (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null);
        /// <summary>
        /// returns a specific Building for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Building 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Building</returns>
        Building GetBuildingById (Guid? id, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific Building for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Building 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Building</returns>
        ApiResponse<Building> GetBuildingByIdWithHttpInfo (Guid? id, int? limit = null, int? offset = null);
        /// <summary>
        /// Returns a (filtered) collection of buildings affiliated withthe Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Buildings affiliated with the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Building&gt;</returns>
        List<Building> GetBuildings (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// Returns a (filtered) collection of buildings affiliated withthe Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Buildings affiliated with the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Building&gt;</returns>
        ApiResponse<List<Building>> GetBuildingsWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// returns all buildings at a Location
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Buildings at the specified Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Building&gt;</returns>
        List<Building> GetBuildingsAtLocation (Guid? locationId, int? limit = null, int? offset = null);

        /// <summary>
        /// returns all buildings at a Location
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Buildings at the specified Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Building&gt;</returns>
        ApiResponse<List<Building>> GetBuildingsAtLocationWithHttpInfo (Guid? locationId, int? limit = null, int? offset = null);
        /// <summary>
        /// retrieves a Cat by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Cat</returns>
        Cat GetCatById (Guid? id);

        /// <summary>
        /// retrieves a Cat by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Cat</returns>
        ApiResponse<Cat> GetCatByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// retrieves a Contact by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Contact by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Contact</returns>
        Contact GetContactById (Guid? id);

        /// <summary>
        /// retrieves a Contact by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Contact by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> GetContactByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// retrieves counties for the provided state
        /// </summary>
        /// <remarks>
        /// Given a state, return an alpha list of counties in that state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetCountiesByState (string state, int? limit = null, int? offset = null);

        /// <summary>
        /// retrieves counties for the provided state
        /// </summary>
        /// <remarks>
        /// Given a state, return an alpha list of counties in that state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetCountiesByStateWithHttpInfo (string state, int? limit = null, int? offset = null);
        /// <summary>
        /// retrieves a Dog by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Dog</returns>
        Dog GetDogById (Guid? id);

        /// <summary>
        /// retrieves a Dog by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Dog</returns>
        ApiResponse<Dog> GetDogByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// retrieves a Donor by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Donor</returns>
        Donor GetDonorById (Guid? id);

        /// <summary>
        /// retrieves a Donor by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Donor</returns>
        ApiResponse<Donor> GetDonorByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// searches animal rescue doners
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Donors. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Donor&gt;</returns>
        List<Donor> GetDonors (string state, string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// searches animal rescue doners
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Donors. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Donor&gt;</returns>
        ApiResponse<List<Donor>> GetDonorsWithHttpInfo (string state, string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// returns a specific Enclosure for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Enclosure 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Enclosure</returns>
        Enclosure GetEnclosureById (Guid? id, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific Enclosure for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Enclosure 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Enclosure</returns>
        ApiResponse<Enclosure> GetEnclosureByIdWithHttpInfo (Guid? id, int? limit = null, int? offset = null);
        /// <summary>
        /// searches all Enclosures for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Enclosures for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Enclosure&gt;</returns>
        List<Enclosure> GetEnclosures (int? limit = null, int? offset = null);

        /// <summary>
        /// searches all Enclosures for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Enclosures for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Enclosure&gt;</returns>
        ApiResponse<List<Enclosure>> GetEnclosuresWithHttpInfo (int? limit = null, int? offset = null);
        /// <summary>
        /// retrieves a Foster by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Foster</returns>
        Foster GetFosterById (Guid? id);

        /// <summary>
        /// retrieves a Foster by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Foster</returns>
        ApiResponse<Foster> GetFosterByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Kennel 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Kennel</returns>
        Kennel GetKennelById (Guid? id, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Kennel 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Kennel</returns>
        ApiResponse<Kennel> GetKennelByIdWithHttpInfo (Guid? id, int? limit = null, int? offset = null);
        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Room 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Kennel</returns>
        Kennel GetKennelFromRoomById (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Room 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Kennel</returns>
        ApiResponse<Kennel> GetKennelFromRoomByIdWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId, int? limit = null, int? offset = null);
        /// <summary>
        /// searches all Kennels for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Kennels for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Kennel&gt;</returns>
        List<Kennel> GetKennels (int? limit = null, int? offset = null);

        /// <summary>
        /// searches all Kennels for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Kennels for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Kennel&gt;</returns>
        ApiResponse<List<Kennel>> GetKennelsWithHttpInfo (int? limit = null, int? offset = null);
        /// <summary>
        /// returns all kennels in a Room
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all kennels in a Room
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Kennel&gt;</returns>
        List<Kennel> GetKennelsInRoom (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null);

        /// <summary>
        /// returns all kennels in a Room
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all kennels in a Room
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Kennel&gt;</returns>
        ApiResponse<List<Kennel>> GetKennelsInRoomWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null);
        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Location</returns>
        Location GetLocationById (Guid? id, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        ApiResponse<Location> GetLocationByIdWithHttpInfo (Guid? id, int? limit = null, int? offset = null);
        /// <summary>
        /// searches all locations for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Locations for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Location&gt;</returns>
        List<Location> GetLocations (int? limit = null, int? offset = null);

        /// <summary>
        /// searches all locations for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Locations for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Location&gt;</returns>
        ApiResponse<List<Location>> GetLocationsWithHttpInfo (int? limit = null, int? offset = null);
        /// <summary>
        /// retrieves a Organization by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Organization</returns>
        Organization GetOrganizationById (Guid? id);

        /// <summary>
        /// retrieves a Organization by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> GetOrganizationByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Room 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Room</returns>
        Room GetRoomInBuildingById (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Room 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Room</returns>
        ApiResponse<Room> GetRoomInBuildingByIdWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null);
        /// <summary>
        /// gets all Rooms in a Building at a Location
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Rooms in a Building
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Room&gt;</returns>
        List<Room> GetRoomsInBuilding (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null);

        /// <summary>
        /// gets all Rooms in a Building at a Location
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Rooms in a Building
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Room&gt;</returns>
        ApiResponse<List<Room>> GetRoomsInBuildingWithHttpInfo (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null);
        /// <summary>
        /// retrieves a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Volunteer</returns>
        Volunteer GetVolunteerById (Guid? id);

        /// <summary>
        /// retrieves a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Volunteer</returns>
        ApiResponse<Volunteer> GetVolunteerByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// support for animal intake process
        /// </summary>
        /// <remarks>
        /// Base endopoints returns and empty Intake array
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Intake&gt;</returns>
        List<Intake> IntakeInformation (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// support for animal intake process
        /// </summary>
        /// <remarks>
        /// Base endopoints returns and empty Intake array
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Intake&gt;</returns>
        ApiResponse<List<Intake>> IntakeInformationWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns></returns>
        void PatchBuildingAtLocationById (Building body, Guid? locationId, Guid? buildingId);

        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchBuildingAtLocationByIdWithHttpInfo (Building body, Guid? locationId, Guid? buildingId);
        /// <summary>
        /// updates a Building by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Building by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Building with fields to patch</param>
        /// <param name="id">unique id of Building to patch</param>
        /// <returns></returns>
        void PatchBuildingById (Building body, Guid? id);

        /// <summary>
        /// updates a Building by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Building by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Building with fields to patch</param>
        /// <param name="id">unique id of Building to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchBuildingByIdWithHttpInfo (Building body, Guid? id);
        /// <summary>
        /// updates a Cat by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Cat by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Cat with fields to patch</param>
        /// <param name="id">unique id of Cat to patch</param>
        /// <returns></returns>
        void PatchCatById (Cat body, Guid? id);

        /// <summary>
        /// updates a Cat by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Cat by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Cat with fields to patch</param>
        /// <param name="id">unique id of Cat to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchCatByIdWithHttpInfo (Cat body, Guid? id);
        /// <summary>
        /// updates a Contact by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Contact by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Contact with fields to patch</param>
        /// <param name="id">unique id of Contact to patch</param>
        /// <returns></returns>
        void PatchContactById (Contact body, Guid? id);

        /// <summary>
        /// updates a Contact by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Contact by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Contact with fields to patch</param>
        /// <param name="id">unique id of Contact to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchContactByIdWithHttpInfo (Contact body, Guid? id);
        /// <summary>
        /// updates a Dog by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Dog by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Dog with fields to patch</param>
        /// <param name="id">unique id of Dog to patch</param>
        /// <returns></returns>
        void PatchDogById (Dog body, Guid? id);

        /// <summary>
        /// updates a Dog by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Dog by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Dog with fields to patch</param>
        /// <param name="id">unique id of Dog to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchDogByIdWithHttpInfo (Dog body, Guid? id);
        /// <summary>
        /// updates a Donor by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Donor by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Donor with fields to patch</param>
        /// <param name="id">unique id of Donor to patch</param>
        /// <returns></returns>
        void PatchDonorById (Donor body, Guid? id);

        /// <summary>
        /// updates a Donor by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Donor by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Donor with fields to patch</param>
        /// <param name="id">unique id of Donor to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchDonorByIdWithHttpInfo (Donor body, Guid? id);
        /// <summary>
        /// updates a Foster by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Foster by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Foster with fields to patch</param>
        /// <param name="id">unique id of Foster to patch</param>
        /// <returns></returns>
        void PatchFosterById (Foster body, Guid? id);

        /// <summary>
        /// updates a Foster by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Foster by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Foster with fields to patch</param>
        /// <param name="id">unique id of Foster to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchFosterByIdWithHttpInfo (Foster body, Guid? id);
        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id">unique id of Kennel to patch</param>
        /// <returns></returns>
        void PatchKennelById (Kennel body, Guid? id);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id">unique id of Kennel to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchKennelByIdWithHttpInfo (Kennel body, Guid? id);
        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns></returns>
        void PatchKennelInRoomById (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchKennelInRoomByIdWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);
        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="id">unique id of Location to patch</param>
        /// <returns></returns>
        void PatchLocationById (Location body, Guid? id);

        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="id">unique id of Location to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchLocationByIdWithHttpInfo (Location body, Guid? id);
        /// <summary>
        /// updates a Organization by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Organization by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Organization with fields to patch</param>
        /// <param name="id">unique id of Organization to patch</param>
        /// <returns></returns>
        void PatchOrganizationById (Organization body, Guid? id);

        /// <summary>
        /// updates a Organization by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Organization by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Organization with fields to patch</param>
        /// <param name="id">unique id of Organization to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchOrganizationByIdWithHttpInfo (Organization body, Guid? id);
        /// <summary>
        /// updates a Room by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Room by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Room with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns></returns>
        void PatchRoomInBuildingById (Room body, Guid? locationId, Guid? buildingId, Guid? roomId);

        /// <summary>
        /// updates a Room by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Room by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Room with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchRoomInBuildingByIdWithHttpInfo (Room body, Guid? locationId, Guid? buildingId, Guid? roomId);
        /// <summary>
        /// updates a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Volunteer by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Volunteer with fields to patch</param>
        /// <param name="id">unique id of Volunteer to patch</param>
        /// <returns></returns>
        void PatchVolunteerById (Volunteer body, Guid? id);

        /// <summary>
        /// updates a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Volunteer by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Volunteer with fields to patch</param>
        /// <param name="id">unique id of Volunteer to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchVolunteerByIdWithHttpInfo (Volunteer body, Guid? id);
        /// <summary>
        /// searches all Adoptions at the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Adoptions at the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Adoption&gt;</returns>
        List<Adoption> SearchAdoptions (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// searches all Adoptions at the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Adoptions at the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Adoption&gt;</returns>
        ApiResponse<List<Adoption>> SearchAdoptionsWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// searches cats
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all cats currently in the shelter. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of cat to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid CatColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>List&lt;Cat&gt;</returns>
        List<Cat> SearchCats (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null);

        /// <summary>
        /// searches cats
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all cats currently in the shelter. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of cat to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid CatColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>ApiResponse of List&lt;Cat&gt;</returns>
        ApiResponse<List<Cat>> SearchCatsWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null);
        /// <summary>
        /// searches Contact
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all contacts associated with the Rescue. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="gender">One of the valid Gender enumeration values (optional)</param>
        /// <returns>List&lt;Contact&gt;</returns>
        List<Contact> SearchContact (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, string searchString = null, Gender gender = null);

        /// <summary>
        /// searches Contact
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all contacts associated with the Rescue. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="gender">One of the valid Gender enumeration values (optional)</param>
        /// <returns>ApiResponse of List&lt;Contact&gt;</returns>
        ApiResponse<List<Contact>> SearchContactWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, string searchString = null, Gender gender = null);
        /// <summary>
        /// searches dogs
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all dogss currently in the shelter. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of dog to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid DogColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>List&lt;Dog&gt;</returns>
        List<Dog> SearchDog (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null);

        /// <summary>
        /// searches dogs
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all dogss currently in the shelter. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of dog to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid DogColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>ApiResponse of List&lt;Dog&gt;</returns>
        ApiResponse<List<Dog>> SearchDogWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null);
        /// <summary>
        /// searches animal fosters
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all registered Fosters. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Foster&gt;</returns>
        List<Foster> SearchFosters (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// searches animal fosters
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all registered Fosters. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Foster&gt;</returns>
        ApiResponse<List<Foster>> SearchFostersWithHttpInfo (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// searches inventory
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available inventory in the system 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up inventory (optional)</param>
        /// <returns>List&lt;InventoryItem&gt;</returns>
        List<InventoryItem> SearchInventory (int? limit = null, int? offset = null, string searchString = null);

        /// <summary>
        /// searches inventory
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available inventory in the system 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up inventory (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItem&gt;</returns>
        ApiResponse<List<InventoryItem>> SearchInventoryWithHttpInfo (int? limit = null, int? offset = null, string searchString = null);
        /// <summary>
        /// searches Organization
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Organizations associated with the Rescue. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>List&lt;Organization&gt;</returns>
        List<Organization> SearchOrganization (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string gender = null);

        /// <summary>
        /// searches Organization
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Organizations associated with the Rescue. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        ApiResponse<List<Organization>> SearchOrganizationWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string gender = null);
        /// <summary>
        /// searches volunteers
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all registered Volunteers. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Volunteer&gt;</returns>
        List<Volunteer> SearchVolunteers (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// searches volunteers
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all registered Volunteers. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Volunteer&gt;</returns>
        ApiResponse<List<Volunteer>> SearchVolunteersWithHttpInfo (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// updates a Cat by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Cat to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        void UpdateCatById (Cat body, Guid? id);

        /// <summary>
        /// updates a Cat by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Cat to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCatByIdWithHttpInfo (Cat body, Guid? id);
        /// <summary>
        /// updates a Dog by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Dog to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        void UpdateDogById (Dog body, Guid? id);

        /// <summary>
        /// updates a Dog by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Dog to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDogByIdWithHttpInfo (Dog body, Guid? id);
        /// <summary>
        /// updates a Donor by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Donor to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        void UpdateDonorById (Donor body, Guid? id);

        /// <summary>
        /// updates a Donor by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Donor to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDonorByIdWithHttpInfo (Donor body, Guid? id);
        /// <summary>
        /// updates a Foster by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Foster to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        void UpdateFosterById (Foster body, Guid? id);

        /// <summary>
        /// updates a Foster by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Foster to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFosterByIdWithHttpInfo (Foster body, Guid? id);
        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id"></param>
        /// <returns></returns>
        void UpdateKennelById (Kennel body, Guid? id);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateKennelByIdWithHttpInfo (Kennel body, Guid? id);
        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel in a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns></returns>
        void UpdateKennelInRoomById (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel in a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateKennelInRoomByIdWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);
        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Location to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        void UpdateLocationById (Location body, Guid? id);

        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Location to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateLocationByIdWithHttpInfo (Location body, Guid? id);
        /// <summary>
        /// updates a Organization by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Organization to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        void UpdateOrganizationById (Organization body, Guid? id);

        /// <summary>
        /// updates a Organization by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Organization to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateOrganizationByIdWithHttpInfo (Organization body, Guid? id);
        /// <summary>
        /// updates a Room by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Room to update</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns></returns>
        void UpdateRoomInBuildingById (Room body, Guid? locationId, Guid? buildingId, Guid? roomId);

        /// <summary>
        /// updates a Room by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Room to update</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRoomInBuildingByIdWithHttpInfo (Room body, Guid? locationId, Guid? buildingId, Guid? roomId);
        /// <summary>
        /// updates a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Volunteer to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        void UpdateVolunteerById (Volunteer body, Guid? id);

        /// <summary>
        /// updates a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Volunteer to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateVolunteerByIdWithHttpInfo (Volunteer body, Guid? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// adds a Building at the specified Location
        /// </summary>
        /// <remarks>
        /// Adds a new Building to the specified Location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Building to update</param>
        /// <param name="locationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddBuildingToLocationAsync (Building body, Guid? locationId);

        /// <summary>
        /// adds a Building at the specified Location
        /// </summary>
        /// <remarks>
        /// Adds a new Building to the specified Location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Building to update</param>
        /// <param name="locationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddBuildingToLocationAsyncWithHttpInfo (Building body, Guid? locationId);
        /// <summary>
        /// adds an inventory item
        /// </summary>
        /// <remarks>
        /// Adds an item to the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Inventory item to add (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddInventoryAsync (InventoryItem body = null);

        /// <summary>
        /// adds an inventory item
        /// </summary>
        /// <remarks>
        /// Adds an item to the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Inventory item to add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddInventoryAsyncWithHttpInfo (InventoryItem body = null);
        /// <summary>
        /// adds a Kennel to the rescue
        /// </summary>
        /// <remarks>
        /// Adds a new Kennel to the Rescue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Kennel to add to the Rescue</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddKennelAsync (Kennel body);

        /// <summary>
        /// adds a Kennel to the rescue
        /// </summary>
        /// <remarks>
        /// Adds a new Kennel to the Rescue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Kennel to add to the Rescue</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddKennelAsyncWithHttpInfo (Kennel body);
        /// <summary>
        /// creates a Kennel in the specified Room
        /// </summary>
        /// <remarks>
        /// Adds a new Kennel to the specified Room
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddKennelToRoomAsync (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId);

        /// <summary>
        /// creates a Kennel in the specified Room
        /// </summary>
        /// <remarks>
        /// Adds a new Kennel to the specified Room
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddKennelToRoomAsyncWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId);
        /// <summary>
        /// creates a Room in the specified Building
        /// </summary>
        /// <remarks>
        /// Adds a new Room to the specified Location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddRoomToBuildingAsync (Room body, Guid? locationId, Guid? buildingId);

        /// <summary>
        /// creates a Room in the specified Building
        /// </summary>
        /// <remarks>
        /// Adds a new Room to the specified Location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddRoomToBuildingAsyncWithHttpInfo (Room body, Guid? locationId, Guid? buildingId);
        /// <summary>
        /// creates a new Cat
        /// </summary>
        /// <remarks>
        /// adds a Cat with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Cat object with new id (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateCatAsync (Cat body = null);

        /// <summary>
        /// creates a new Cat
        /// </summary>
        /// <remarks>
        /// adds a Cat with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Cat object with new id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateCatAsyncWithHttpInfo (Cat body = null);
        /// <summary>
        /// creates a new Contact
        /// </summary>
        /// <remarks>
        /// adds a Contact with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Contact object with new id (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateContactAsync (Contact body = null);

        /// <summary>
        /// creates a new Contact
        /// </summary>
        /// <remarks>
        /// adds a Contact with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Contact object with new id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateContactAsyncWithHttpInfo (Contact body = null);
        /// <summary>
        /// creates a new Dog
        /// </summary>
        /// <remarks>
        /// adds a Dog with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Dog object with new id (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateDogAsync (Dog body = null);

        /// <summary>
        /// creates a new Dog
        /// </summary>
        /// <remarks>
        /// adds a Dog with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Dog object with new id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateDogAsyncWithHttpInfo (Dog body = null);
        /// <summary>
        /// creates new Donor with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Donor
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Donor object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateDonorAsync (Donor body);

        /// <summary>
        /// creates new Donor with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Donor
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Donor object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateDonorAsyncWithHttpInfo (Donor body);
        /// <summary>
        /// creates new Foster with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Foster
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Foster object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateFosterAsync (Foster body);

        /// <summary>
        /// creates new Foster with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Foster
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Foster object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateFosterAsyncWithHttpInfo (Foster body);
        /// <summary>
        /// creates a new Organization
        /// </summary>
        /// <remarks>
        /// adds a Organization with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Organization object with new id (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateOrganizationAsync (Organization body = null);

        /// <summary>
        /// creates a new Organization
        /// </summary>
        /// <remarks>
        /// adds a Organization with a unique id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Organization object with new id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrganizationAsyncWithHttpInfo (Organization body = null);
        /// <summary>
        /// creates new Volunteer with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Volunteer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Volunteer object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateVolunteerAsync (Volunteer body);

        /// <summary>
        /// creates new Volunteer with a unique id
        /// </summary>
        /// <remarks>
        /// creates a new, unique Volunteer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Volunteer object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateVolunteerAsyncWithHttpInfo (Volunteer body);
        /// <summary>
        /// deletes a Building from a Location by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Building at a Location by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBuildingAtLocationByIdAsync (Guid? locationId, Guid? buildingId);

        /// <summary>
        /// deletes a Building from a Location by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Building at a Location by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBuildingAtLocationByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId);
        /// <summary>
        /// deletes a Cat by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCatByIdAsync (Guid? id);

        /// <summary>
        /// deletes a Cat by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCatByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Contact by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Contact by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactByIdAsync (Guid? id);

        /// <summary>
        /// deletes a Contact by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Contact by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Dog by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDogByIdAsync (Guid? id);

        /// <summary>
        /// deletes a Dog by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDogByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Donor by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDonorByIdAsync (Guid? id);

        /// <summary>
        /// deletes a Donor by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDonorByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Foster by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFosterByIdAsync (Guid? id);

        /// <summary>
        /// deletes a Foster by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFosterByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Kennel by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Kennel by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteKennelByIdAsync (Guid? id);

        /// <summary>
        /// deletes a Kennel by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Kennel by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKennelByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Kennel by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Kennel from a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteKennelFromRoomByIdAsync (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);

        /// <summary>
        /// deletes a Kennel by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Kennel from a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKennelFromRoomByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);
        /// <summary>
        /// deletes a Organization by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrganizationByIdAsync (Guid? id);

        /// <summary>
        /// deletes a Organization by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrganizationByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// deletes a Room by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Building at a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoomFromBuildingByIdAsync (Guid? locationId, Guid? buildingId, Guid? roomId);

        /// <summary>
        /// deletes a Room by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Building at a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoomFromBuildingByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId);
        /// <summary>
        /// deletes a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVolunteerByIdAsync (Guid? id);

        /// <summary>
        /// deletes a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Deletes an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVolunteerByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// reports whether the API is up and running
        /// </summary>
        /// <remarks>
        /// used to check on the api status, but returns no content
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetApiHealthAsync ();

        /// <summary>
        /// reports whether the API is up and running
        /// </summary>
        /// <remarks>
        /// used to check on the api status, but returns no content
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetApiHealthAsyncWithHttpInfo ();
        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> GetBuildingAtLocationByIdAsync (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> GetBuildingAtLocationByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null);
        /// <summary>
        /// returns a specific Building for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Building 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Building</returns>
        System.Threading.Tasks.Task<Building> GetBuildingByIdAsync (Guid? id, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific Building for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Building 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Building)</returns>
        System.Threading.Tasks.Task<ApiResponse<Building>> GetBuildingByIdAsyncWithHttpInfo (Guid? id, int? limit = null, int? offset = null);
        /// <summary>
        /// Returns a (filtered) collection of buildings affiliated withthe Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Buildings affiliated with the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Building&gt;</returns>
        System.Threading.Tasks.Task<List<Building>> GetBuildingsAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// Returns a (filtered) collection of buildings affiliated withthe Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Buildings affiliated with the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Building&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Building>>> GetBuildingsAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// returns all buildings at a Location
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Buildings at the specified Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Building&gt;</returns>
        System.Threading.Tasks.Task<List<Building>> GetBuildingsAtLocationAsync (Guid? locationId, int? limit = null, int? offset = null);

        /// <summary>
        /// returns all buildings at a Location
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Buildings at the specified Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Building&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Building>>> GetBuildingsAtLocationAsyncWithHttpInfo (Guid? locationId, int? limit = null, int? offset = null);
        /// <summary>
        /// retrieves a Cat by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Cat</returns>
        System.Threading.Tasks.Task<Cat> GetCatByIdAsync (Guid? id);

        /// <summary>
        /// retrieves a Cat by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Cat)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cat>> GetCatByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// retrieves a Contact by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Contact by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> GetContactByIdAsync (Guid? id);

        /// <summary>
        /// retrieves a Contact by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Contact by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// retrieves counties for the provided state
        /// </summary>
        /// <remarks>
        /// Given a state, return an alpha list of counties in that state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetCountiesByStateAsync (string state, int? limit = null, int? offset = null);

        /// <summary>
        /// retrieves counties for the provided state
        /// </summary>
        /// <remarks>
        /// Given a state, return an alpha list of counties in that state
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetCountiesByStateAsyncWithHttpInfo (string state, int? limit = null, int? offset = null);
        /// <summary>
        /// retrieves a Dog by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Dog</returns>
        System.Threading.Tasks.Task<Dog> GetDogByIdAsync (Guid? id);

        /// <summary>
        /// retrieves a Dog by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Dog)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dog>> GetDogByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// retrieves a Donor by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Donor</returns>
        System.Threading.Tasks.Task<Donor> GetDonorByIdAsync (Guid? id);

        /// <summary>
        /// retrieves a Donor by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Donor)</returns>
        System.Threading.Tasks.Task<ApiResponse<Donor>> GetDonorByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// searches animal rescue doners
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Donors. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Donor&gt;</returns>
        System.Threading.Tasks.Task<List<Donor>> GetDonorsAsync (string state, string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// searches animal rescue doners
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Donors. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Donor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Donor>>> GetDonorsAsyncWithHttpInfo (string state, string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// returns a specific Enclosure for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Enclosure 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Enclosure</returns>
        System.Threading.Tasks.Task<Enclosure> GetEnclosureByIdAsync (Guid? id, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific Enclosure for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Enclosure 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Enclosure)</returns>
        System.Threading.Tasks.Task<ApiResponse<Enclosure>> GetEnclosureByIdAsyncWithHttpInfo (Guid? id, int? limit = null, int? offset = null);
        /// <summary>
        /// searches all Enclosures for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Enclosures for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Enclosure&gt;</returns>
        System.Threading.Tasks.Task<List<Enclosure>> GetEnclosuresAsync (int? limit = null, int? offset = null);

        /// <summary>
        /// searches all Enclosures for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Enclosures for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Enclosure&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Enclosure>>> GetEnclosuresAsyncWithHttpInfo (int? limit = null, int? offset = null);
        /// <summary>
        /// retrieves a Foster by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Foster</returns>
        System.Threading.Tasks.Task<Foster> GetFosterByIdAsync (Guid? id);

        /// <summary>
        /// retrieves a Foster by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Foster)</returns>
        System.Threading.Tasks.Task<ApiResponse<Foster>> GetFosterByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Kennel 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Kennel</returns>
        System.Threading.Tasks.Task<Kennel> GetKennelByIdAsync (Guid? id, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Kennel 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Kennel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Kennel>> GetKennelByIdAsyncWithHttpInfo (Guid? id, int? limit = null, int? offset = null);
        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Room 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Kennel</returns>
        System.Threading.Tasks.Task<Kennel> GetKennelFromRoomByIdAsync (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Room 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Kennel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Kennel>> GetKennelFromRoomByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId, int? limit = null, int? offset = null);
        /// <summary>
        /// searches all Kennels for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Kennels for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Kennel&gt;</returns>
        System.Threading.Tasks.Task<List<Kennel>> GetKennelsAsync (int? limit = null, int? offset = null);

        /// <summary>
        /// searches all Kennels for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Kennels for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Kennel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Kennel>>> GetKennelsAsyncWithHttpInfo (int? limit = null, int? offset = null);
        /// <summary>
        /// returns all kennels in a Room
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all kennels in a Room
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Kennel&gt;</returns>
        System.Threading.Tasks.Task<List<Kennel>> GetKennelsInRoomAsync (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null);

        /// <summary>
        /// returns all kennels in a Room
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all kennels in a Room
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Kennel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Kennel>>> GetKennelsInRoomAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null);
        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Location</returns>
        System.Threading.Tasks.Task<Location> GetLocationByIdAsync (Guid? id, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Location 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> GetLocationByIdAsyncWithHttpInfo (Guid? id, int? limit = null, int? offset = null);
        /// <summary>
        /// searches all locations for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Locations for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Location&gt;</returns>
        System.Threading.Tasks.Task<List<Location>> GetLocationsAsync (int? limit = null, int? offset = null);

        /// <summary>
        /// searches all locations for the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Locations for the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Location&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Location>>> GetLocationsAsyncWithHttpInfo (int? limit = null, int? offset = null);
        /// <summary>
        /// retrieves a Organization by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> GetOrganizationByIdAsync (Guid? id);

        /// <summary>
        /// retrieves a Organization by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrganizationByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Room 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Room</returns>
        System.Threading.Tasks.Task<Room> GetRoomInBuildingByIdAsync (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>
        /// Returns details about a specific Room 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Room)</returns>
        System.Threading.Tasks.Task<ApiResponse<Room>> GetRoomInBuildingByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null);
        /// <summary>
        /// gets all Rooms in a Building at a Location
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Rooms in a Building
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Room&gt;</returns>
        System.Threading.Tasks.Task<List<Room>> GetRoomsInBuildingAsync (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null);

        /// <summary>
        /// gets all Rooms in a Building at a Location
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Rooms in a Building
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Room&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Room>>> GetRoomsInBuildingAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null);
        /// <summary>
        /// retrieves a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Volunteer</returns>
        System.Threading.Tasks.Task<Volunteer> GetVolunteerByIdAsync (Guid? id);

        /// <summary>
        /// retrieves a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Gets an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Volunteer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Volunteer>> GetVolunteerByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// support for animal intake process
        /// </summary>
        /// <remarks>
        /// Base endopoints returns and empty Intake array
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Intake&gt;</returns>
        System.Threading.Tasks.Task<List<Intake>> IntakeInformationAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// support for animal intake process
        /// </summary>
        /// <remarks>
        /// Base endopoints returns and empty Intake array
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Intake&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Intake>>> IntakeInformationAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchBuildingAtLocationByIdAsync (Building body, Guid? locationId, Guid? buildingId);

        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchBuildingAtLocationByIdAsyncWithHttpInfo (Building body, Guid? locationId, Guid? buildingId);
        /// <summary>
        /// updates a Building by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Building by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Building with fields to patch</param>
        /// <param name="id">unique id of Building to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchBuildingByIdAsync (Building body, Guid? id);

        /// <summary>
        /// updates a Building by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Building by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Building with fields to patch</param>
        /// <param name="id">unique id of Building to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchBuildingByIdAsyncWithHttpInfo (Building body, Guid? id);
        /// <summary>
        /// updates a Cat by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Cat by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Cat with fields to patch</param>
        /// <param name="id">unique id of Cat to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchCatByIdAsync (Cat body, Guid? id);

        /// <summary>
        /// updates a Cat by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Cat by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Cat with fields to patch</param>
        /// <param name="id">unique id of Cat to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchCatByIdAsyncWithHttpInfo (Cat body, Guid? id);
        /// <summary>
        /// updates a Contact by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Contact by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Contact with fields to patch</param>
        /// <param name="id">unique id of Contact to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchContactByIdAsync (Contact body, Guid? id);

        /// <summary>
        /// updates a Contact by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Contact by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Contact with fields to patch</param>
        /// <param name="id">unique id of Contact to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchContactByIdAsyncWithHttpInfo (Contact body, Guid? id);
        /// <summary>
        /// updates a Dog by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Dog by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Dog with fields to patch</param>
        /// <param name="id">unique id of Dog to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchDogByIdAsync (Dog body, Guid? id);

        /// <summary>
        /// updates a Dog by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Dog by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Dog with fields to patch</param>
        /// <param name="id">unique id of Dog to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchDogByIdAsyncWithHttpInfo (Dog body, Guid? id);
        /// <summary>
        /// updates a Donor by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Donor by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Donor with fields to patch</param>
        /// <param name="id">unique id of Donor to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchDonorByIdAsync (Donor body, Guid? id);

        /// <summary>
        /// updates a Donor by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Donor by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Donor with fields to patch</param>
        /// <param name="id">unique id of Donor to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchDonorByIdAsyncWithHttpInfo (Donor body, Guid? id);
        /// <summary>
        /// updates a Foster by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Foster by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Foster with fields to patch</param>
        /// <param name="id">unique id of Foster to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchFosterByIdAsync (Foster body, Guid? id);

        /// <summary>
        /// updates a Foster by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Foster by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Foster with fields to patch</param>
        /// <param name="id">unique id of Foster to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchFosterByIdAsyncWithHttpInfo (Foster body, Guid? id);
        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id">unique id of Kennel to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchKennelByIdAsync (Kennel body, Guid? id);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id">unique id of Kennel to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchKennelByIdAsyncWithHttpInfo (Kennel body, Guid? id);
        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchKennelInRoomByIdAsync (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchKennelInRoomByIdAsyncWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);
        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="id">unique id of Location to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchLocationByIdAsync (Location body, Guid? id);

        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="id">unique id of Location to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchLocationByIdAsyncWithHttpInfo (Location body, Guid? id);
        /// <summary>
        /// updates a Organization by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Organization by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Organization with fields to patch</param>
        /// <param name="id">unique id of Organization to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchOrganizationByIdAsync (Organization body, Guid? id);

        /// <summary>
        /// updates a Organization by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Organization by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Organization with fields to patch</param>
        /// <param name="id">unique id of Organization to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchOrganizationByIdAsyncWithHttpInfo (Organization body, Guid? id);
        /// <summary>
        /// updates a Room by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Room by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Room with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchRoomInBuildingByIdAsync (Room body, Guid? locationId, Guid? buildingId, Guid? roomId);

        /// <summary>
        /// updates a Room by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Room by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Room with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchRoomInBuildingByIdAsyncWithHttpInfo (Room body, Guid? locationId, Guid? buildingId, Guid? roomId);
        /// <summary>
        /// updates a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Volunteer by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Volunteer with fields to patch</param>
        /// <param name="id">unique id of Volunteer to patch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchVolunteerByIdAsync (Volunteer body, Guid? id);

        /// <summary>
        /// updates a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Volunteer by id with only elements that are changing
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Volunteer with fields to patch</param>
        /// <param name="id">unique id of Volunteer to patch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchVolunteerByIdAsyncWithHttpInfo (Volunteer body, Guid? id);
        /// <summary>
        /// searches all Adoptions at the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Adoptions at the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Adoption&gt;</returns>
        System.Threading.Tasks.Task<List<Adoption>> SearchAdoptionsAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// searches all Adoptions at the Rescue
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Adoptions at the Rescue 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Adoption&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Adoption>>> SearchAdoptionsAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// searches cats
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all cats currently in the shelter. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of cat to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid CatColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of List&lt;Cat&gt;</returns>
        System.Threading.Tasks.Task<List<Cat>> SearchCatsAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null);

        /// <summary>
        /// searches cats
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all cats currently in the shelter. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of cat to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid CatColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Cat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Cat>>> SearchCatsAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null);
        /// <summary>
        /// searches Contact
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all contacts associated with the Rescue. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="gender">One of the valid Gender enumeration values (optional)</param>
        /// <returns>Task of List&lt;Contact&gt;</returns>
        System.Threading.Tasks.Task<List<Contact>> SearchContactAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, string searchString = null, Gender gender = null);

        /// <summary>
        /// searches Contact
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all contacts associated with the Rescue. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="gender">One of the valid Gender enumeration values (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contact&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contact>>> SearchContactAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, string searchString = null, Gender gender = null);
        /// <summary>
        /// searches dogs
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all dogss currently in the shelter. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of dog to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid DogColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of List&lt;Dog&gt;</returns>
        System.Threading.Tasks.Task<List<Dog>> SearchDogAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null);

        /// <summary>
        /// searches dogs
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all dogss currently in the shelter. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of dog to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid DogColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Dog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dog>>> SearchDogAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null);
        /// <summary>
        /// searches animal fosters
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all registered Fosters. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Foster&gt;</returns>
        System.Threading.Tasks.Task<List<Foster>> SearchFostersAsync (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// searches animal fosters
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all registered Fosters. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Foster&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Foster>>> SearchFostersAsyncWithHttpInfo (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// searches inventory
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available inventory in the system 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up inventory (optional)</param>
        /// <returns>Task of List&lt;InventoryItem&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryItem>> SearchInventoryAsync (int? limit = null, int? offset = null, string searchString = null);

        /// <summary>
        /// searches inventory
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available inventory in the system 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up inventory (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryItem>>> SearchInventoryAsyncWithHttpInfo (int? limit = null, int? offset = null, string searchString = null);
        /// <summary>
        /// searches Organization
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Organizations associated with the Rescue. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        System.Threading.Tasks.Task<List<Organization>> SearchOrganizationAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string gender = null);

        /// <summary>
        /// searches Organization
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all Organizations associated with the Rescue. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Organization>>> SearchOrganizationAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string gender = null);
        /// <summary>
        /// searches volunteers
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all registered Volunteers. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Volunteer&gt;</returns>
        System.Threading.Tasks.Task<List<Volunteer>> SearchVolunteersAsync (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// searches volunteers
        /// </summary>
        /// <remarks>
        /// With no parameters, returns all registered Volunteers. Allows filters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Volunteer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Volunteer>>> SearchVolunteersAsyncWithHttpInfo (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// updates a Cat by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Cat to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCatByIdAsync (Cat body, Guid? id);

        /// <summary>
        /// updates a Cat by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Cat by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Cat to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCatByIdAsyncWithHttpInfo (Cat body, Guid? id);
        /// <summary>
        /// updates a Dog by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Dog to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDogByIdAsync (Dog body, Guid? id);

        /// <summary>
        /// updates a Dog by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Dog by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Dog to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDogByIdAsyncWithHttpInfo (Dog body, Guid? id);
        /// <summary>
        /// updates a Donor by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Donor to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDonorByIdAsync (Donor body, Guid? id);

        /// <summary>
        /// updates a Donor by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Donor by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Donor to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDonorByIdAsyncWithHttpInfo (Donor body, Guid? id);
        /// <summary>
        /// updates a Foster by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Foster to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFosterByIdAsync (Foster body, Guid? id);

        /// <summary>
        /// updates a Foster by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Foster by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Foster to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFosterByIdAsyncWithHttpInfo (Foster body, Guid? id);
        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateKennelByIdAsync (Kennel body, Guid? id);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKennelByIdAsyncWithHttpInfo (Kennel body, Guid? id);
        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel in a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateKennelInRoomByIdAsync (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Kennel in a Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKennelInRoomByIdAsyncWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId);
        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Location to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateLocationByIdAsync (Location body, Guid? id);

        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Location by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Location to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLocationByIdAsyncWithHttpInfo (Location body, Guid? id);
        /// <summary>
        /// updates a Organization by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Organization to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateOrganizationByIdAsync (Organization body, Guid? id);

        /// <summary>
        /// updates a Organization by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Organization by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Organization to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrganizationByIdAsyncWithHttpInfo (Organization body, Guid? id);
        /// <summary>
        /// updates a Room by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Room to update</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRoomInBuildingByIdAsync (Room body, Guid? locationId, Guid? buildingId, Guid? roomId);

        /// <summary>
        /// updates a Room by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Room by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Room to update</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRoomInBuildingByIdAsyncWithHttpInfo (Room body, Guid? locationId, Guid? buildingId, Guid? roomId);
        /// <summary>
        /// updates a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Volunteer to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateVolunteerByIdAsync (Volunteer body, Guid? id);

        /// <summary>
        /// updates a Volunteer by id
        /// </summary>
        /// <remarks>
        /// Updates an existing Volunteer by id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Volunteer to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateVolunteerByIdAsyncWithHttpInfo (Volunteer body, Guid? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class StaffApi : IStaffApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StaffApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffApi"/> class
        /// </summary>
        /// <returns></returns>
        public StaffApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StaffApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// adds a Building at the specified Location Adds a new Building to the specified Location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Building to update</param>
        /// <param name="locationId"></param>
        /// <returns></returns>
        public void AddBuildingToLocation (Building body, Guid? locationId)
        {
             AddBuildingToLocationWithHttpInfo(body, locationId);
        }

        /// <summary>
        /// adds a Building at the specified Location Adds a new Building to the specified Location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Building to update</param>
        /// <param name="locationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddBuildingToLocationWithHttpInfo (Building body, Guid? locationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->AddBuildingToLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->AddBuildingToLocation");

            var localVarPath = "./locations/{locationId}/buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBuildingToLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// adds a Building at the specified Location Adds a new Building to the specified Location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Building to update</param>
        /// <param name="locationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddBuildingToLocationAsync (Building body, Guid? locationId)
        {
             await AddBuildingToLocationAsyncWithHttpInfo(body, locationId);

        }

        /// <summary>
        /// adds a Building at the specified Location Adds a new Building to the specified Location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Building to update</param>
        /// <param name="locationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddBuildingToLocationAsyncWithHttpInfo (Building body, Guid? locationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->AddBuildingToLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->AddBuildingToLocation");

            var localVarPath = "./locations/{locationId}/buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBuildingToLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// adds an inventory item Adds an item to the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Inventory item to add (optional)</param>
        /// <returns></returns>
        public void AddInventory (InventoryItem body = null)
        {
             AddInventoryWithHttpInfo(body);
        }

        /// <summary>
        /// adds an inventory item Adds an item to the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Inventory item to add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddInventoryWithHttpInfo (InventoryItem body = null)
        {

            var localVarPath = "./inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// adds an inventory item Adds an item to the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Inventory item to add (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddInventoryAsync (InventoryItem body = null)
        {
             await AddInventoryAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// adds an inventory item Adds an item to the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Inventory item to add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddInventoryAsyncWithHttpInfo (InventoryItem body = null)
        {

            var localVarPath = "./inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// adds a Kennel to the rescue Adds a new Kennel to the Rescue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Kennel to add to the Rescue</param>
        /// <returns></returns>
        public void AddKennel (Kennel body)
        {
             AddKennelWithHttpInfo(body);
        }

        /// <summary>
        /// adds a Kennel to the rescue Adds a new Kennel to the Rescue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Kennel to add to the Rescue</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddKennelWithHttpInfo (Kennel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->AddKennel");

            var localVarPath = "./kennels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddKennel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// adds a Kennel to the rescue Adds a new Kennel to the Rescue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Kennel to add to the Rescue</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddKennelAsync (Kennel body)
        {
             await AddKennelAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// adds a Kennel to the rescue Adds a new Kennel to the Rescue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Kennel to add to the Rescue</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddKennelAsyncWithHttpInfo (Kennel body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->AddKennel");

            var localVarPath = "./kennels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddKennel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a Kennel in the specified Room Adds a new Kennel to the specified Room
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns></returns>
        public void AddKennelToRoom (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
             AddKennelToRoomWithHttpInfo(body, locationId, buildingId, roomId);
        }

        /// <summary>
        /// creates a Kennel in the specified Room Adds a new Kennel to the specified Room
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddKennelToRoomWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->AddKennelToRoom");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->AddKennelToRoom");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->AddKennelToRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->AddKennelToRoom");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/room/{roomId}/kennels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddKennelToRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a Kennel in the specified Room Adds a new Kennel to the specified Room
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddKennelToRoomAsync (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
             await AddKennelToRoomAsyncWithHttpInfo(body, locationId, buildingId, roomId);

        }

        /// <summary>
        /// creates a Kennel in the specified Room Adds a new Kennel to the specified Room
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddKennelToRoomAsyncWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->AddKennelToRoom");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->AddKennelToRoom");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->AddKennelToRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->AddKennelToRoom");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/room/{roomId}/kennels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddKennelToRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a Room in the specified Building Adds a new Room to the specified Location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns></returns>
        public void AddRoomToBuilding (Room body, Guid? locationId, Guid? buildingId)
        {
             AddRoomToBuildingWithHttpInfo(body, locationId, buildingId);
        }

        /// <summary>
        /// creates a Room in the specified Building Adds a new Room to the specified Location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddRoomToBuildingWithHttpInfo (Room body, Guid? locationId, Guid? buildingId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->AddRoomToBuilding");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->AddRoomToBuilding");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->AddRoomToBuilding");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRoomToBuilding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a Room in the specified Building Adds a new Room to the specified Location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddRoomToBuildingAsync (Room body, Guid? locationId, Guid? buildingId)
        {
             await AddRoomToBuildingAsyncWithHttpInfo(body, locationId, buildingId);

        }

        /// <summary>
        /// creates a Room in the specified Building Adds a new Room to the specified Location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddRoomToBuildingAsyncWithHttpInfo (Room body, Guid? locationId, Guid? buildingId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->AddRoomToBuilding");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->AddRoomToBuilding");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->AddRoomToBuilding");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRoomToBuilding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a new Cat adds a Cat with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Cat object with new id (optional)</param>
        /// <returns></returns>
        public void CreateCat (Cat body = null)
        {
             CreateCatWithHttpInfo(body);
        }

        /// <summary>
        /// creates a new Cat adds a Cat with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Cat object with new id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateCatWithHttpInfo (Cat body = null)
        {

            var localVarPath = "./cats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a new Cat adds a Cat with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Cat object with new id (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateCatAsync (Cat body = null)
        {
             await CreateCatAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// creates a new Cat adds a Cat with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Cat object with new id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateCatAsyncWithHttpInfo (Cat body = null)
        {

            var localVarPath = "./cats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a new Contact adds a Contact with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Contact object with new id (optional)</param>
        /// <returns></returns>
        public void CreateContact (Contact body = null)
        {
             CreateContactWithHttpInfo(body);
        }

        /// <summary>
        /// creates a new Contact adds a Contact with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Contact object with new id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateContactWithHttpInfo (Contact body = null)
        {

            var localVarPath = "./contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a new Contact adds a Contact with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Contact object with new id (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateContactAsync (Contact body = null)
        {
             await CreateContactAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// creates a new Contact adds a Contact with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Contact object with new id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateContactAsyncWithHttpInfo (Contact body = null)
        {

            var localVarPath = "./contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a new Dog adds a Dog with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Dog object with new id (optional)</param>
        /// <returns></returns>
        public void CreateDog (Dog body = null)
        {
             CreateDogWithHttpInfo(body);
        }

        /// <summary>
        /// creates a new Dog adds a Dog with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Dog object with new id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateDogWithHttpInfo (Dog body = null)
        {

            var localVarPath = "./dogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a new Dog adds a Dog with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Dog object with new id (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateDogAsync (Dog body = null)
        {
             await CreateDogAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// creates a new Dog adds a Dog with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Dog object with new id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateDogAsyncWithHttpInfo (Dog body = null)
        {

            var localVarPath = "./dogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates new Donor with a unique id creates a new, unique Donor
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Donor object</param>
        /// <returns></returns>
        public void CreateDonor (Donor body)
        {
             CreateDonorWithHttpInfo(body);
        }

        /// <summary>
        /// creates new Donor with a unique id creates a new, unique Donor
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Donor object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateDonorWithHttpInfo (Donor body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->CreateDonor");

            var localVarPath = "./donors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDonor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates new Donor with a unique id creates a new, unique Donor
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Donor object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateDonorAsync (Donor body)
        {
             await CreateDonorAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// creates new Donor with a unique id creates a new, unique Donor
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Donor object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateDonorAsyncWithHttpInfo (Donor body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->CreateDonor");

            var localVarPath = "./donors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDonor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates new Foster with a unique id creates a new, unique Foster
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Foster object</param>
        /// <returns></returns>
        public void CreateFoster (Foster body)
        {
             CreateFosterWithHttpInfo(body);
        }

        /// <summary>
        /// creates new Foster with a unique id creates a new, unique Foster
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Foster object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateFosterWithHttpInfo (Foster body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->CreateFoster");

            var localVarPath = "./fosters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFoster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates new Foster with a unique id creates a new, unique Foster
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Foster object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateFosterAsync (Foster body)
        {
             await CreateFosterAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// creates new Foster with a unique id creates a new, unique Foster
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Foster object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateFosterAsyncWithHttpInfo (Foster body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->CreateFoster");

            var localVarPath = "./fosters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFoster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a new Organization adds a Organization with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Organization object with new id (optional)</param>
        /// <returns></returns>
        public void CreateOrganization (Organization body = null)
        {
             CreateOrganizationWithHttpInfo(body);
        }

        /// <summary>
        /// creates a new Organization adds a Organization with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Organization object with new id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateOrganizationWithHttpInfo (Organization body = null)
        {

            var localVarPath = "./organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates a new Organization adds a Organization with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Organization object with new id (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateOrganizationAsync (Organization body = null)
        {
             await CreateOrganizationAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// creates a new Organization adds a Organization with a unique id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">full Organization object with new id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrganizationAsyncWithHttpInfo (Organization body = null)
        {

            var localVarPath = "./organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates new Volunteer with a unique id creates a new, unique Volunteer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Volunteer object</param>
        /// <returns></returns>
        public void CreateVolunteer (Volunteer body)
        {
             CreateVolunteerWithHttpInfo(body);
        }

        /// <summary>
        /// creates new Volunteer with a unique id creates a new, unique Volunteer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Volunteer object</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateVolunteerWithHttpInfo (Volunteer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->CreateVolunteer");

            var localVarPath = "./volunteers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVolunteer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// creates new Volunteer with a unique id creates a new, unique Volunteer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Volunteer object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateVolunteerAsync (Volunteer body)
        {
             await CreateVolunteerAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// creates new Volunteer with a unique id creates a new, unique Volunteer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">new Volunteer object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateVolunteerAsyncWithHttpInfo (Volunteer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->CreateVolunteer");

            var localVarPath = "./volunteers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVolunteer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Building from a Location by id Deletes an existing Building at a Location by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns></returns>
        public void DeleteBuildingAtLocationById (Guid? locationId, Guid? buildingId)
        {
             DeleteBuildingAtLocationByIdWithHttpInfo(locationId, buildingId);
        }

        /// <summary>
        /// deletes a Building from a Location by id Deletes an existing Building at a Location by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBuildingAtLocationByIdWithHttpInfo (Guid? locationId, Guid? buildingId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->DeleteBuildingAtLocationById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->DeleteBuildingAtLocationById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBuildingAtLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Building from a Location by id Deletes an existing Building at a Location by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBuildingAtLocationByIdAsync (Guid? locationId, Guid? buildingId)
        {
             await DeleteBuildingAtLocationByIdAsyncWithHttpInfo(locationId, buildingId);

        }

        /// <summary>
        /// deletes a Building from a Location by id Deletes an existing Building at a Location by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBuildingAtLocationByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->DeleteBuildingAtLocationById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->DeleteBuildingAtLocationById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBuildingAtLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Cat by id Deletes an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteCatById (Guid? id)
        {
             DeleteCatByIdWithHttpInfo(id);
        }

        /// <summary>
        /// deletes a Cat by id Deletes an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCatByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteCatById");

            var localVarPath = "./cats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Cat by id Deletes an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCatByIdAsync (Guid? id)
        {
             await DeleteCatByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deletes a Cat by id Deletes an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCatByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteCatById");

            var localVarPath = "./cats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Contact by id Deletes an existing Contact by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContactById (Guid? id)
        {
             DeleteContactByIdWithHttpInfo(id);
        }

        /// <summary>
        /// deletes a Contact by id Deletes an existing Contact by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteContactById");

            var localVarPath = "./contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Contact by id Deletes an existing Contact by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactByIdAsync (Guid? id)
        {
             await DeleteContactByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deletes a Contact by id Deletes an existing Contact by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteContactById");

            var localVarPath = "./contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Dog by id Deletes an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteDogById (Guid? id)
        {
             DeleteDogByIdWithHttpInfo(id);
        }

        /// <summary>
        /// deletes a Dog by id Deletes an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDogByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteDogById");

            var localVarPath = "./dogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Dog by id Deletes an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDogByIdAsync (Guid? id)
        {
             await DeleteDogByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deletes a Dog by id Deletes an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDogByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteDogById");

            var localVarPath = "./dogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Donor by id Deletes an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteDonorById (Guid? id)
        {
             DeleteDonorByIdWithHttpInfo(id);
        }

        /// <summary>
        /// deletes a Donor by id Deletes an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDonorByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteDonorById");

            var localVarPath = "./donors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDonorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Donor by id Deletes an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDonorByIdAsync (Guid? id)
        {
             await DeleteDonorByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deletes a Donor by id Deletes an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDonorByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteDonorById");

            var localVarPath = "./donors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDonorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Foster by id Deletes an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteFosterById (Guid? id)
        {
             DeleteFosterByIdWithHttpInfo(id);
        }

        /// <summary>
        /// deletes a Foster by id Deletes an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFosterByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteFosterById");

            var localVarPath = "./fosters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFosterById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Foster by id Deletes an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFosterByIdAsync (Guid? id)
        {
             await DeleteFosterByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deletes a Foster by id Deletes an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFosterByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteFosterById");

            var localVarPath = "./fosters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFosterById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Kennel by id Deletes an existing Kennel by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteKennelById (Guid? id)
        {
             DeleteKennelByIdWithHttpInfo(id);
        }

        /// <summary>
        /// deletes a Kennel by id Deletes an existing Kennel by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteKennelByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteKennelById");

            var localVarPath = "./kennels/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKennelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Kennel by id Deletes an existing Kennel by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteKennelByIdAsync (Guid? id)
        {
             await DeleteKennelByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deletes a Kennel by id Deletes an existing Kennel by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKennelByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteKennelById");

            var localVarPath = "./kennels/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKennelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Kennel by id Deletes an existing Kennel from a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns></returns>
        public void DeleteKennelFromRoomById (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
             DeleteKennelFromRoomByIdWithHttpInfo(locationId, buildingId, roomId, kennelId);
        }

        /// <summary>
        /// deletes a Kennel by id Deletes an existing Kennel from a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteKennelFromRoomByIdWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->DeleteKennelFromRoomById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->DeleteKennelFromRoomById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->DeleteKennelFromRoomById");
            // verify the required parameter 'kennelId' is set
            if (kennelId == null)
                throw new ApiException(400, "Missing required parameter 'kennelId' when calling StaffApi->DeleteKennelFromRoomById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (kennelId != null) localVarPathParams.Add("kennelId", this.Configuration.ApiClient.ParameterToString(kennelId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKennelFromRoomById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Kennel by id Deletes an existing Kennel from a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteKennelFromRoomByIdAsync (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
             await DeleteKennelFromRoomByIdAsyncWithHttpInfo(locationId, buildingId, roomId, kennelId);

        }

        /// <summary>
        /// deletes a Kennel by id Deletes an existing Kennel from a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKennelFromRoomByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->DeleteKennelFromRoomById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->DeleteKennelFromRoomById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->DeleteKennelFromRoomById");
            // verify the required parameter 'kennelId' is set
            if (kennelId == null)
                throw new ApiException(400, "Missing required parameter 'kennelId' when calling StaffApi->DeleteKennelFromRoomById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (kennelId != null) localVarPathParams.Add("kennelId", this.Configuration.ApiClient.ParameterToString(kennelId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKennelFromRoomById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Organization by id Deletes an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteOrganizationById (Guid? id)
        {
             DeleteOrganizationByIdWithHttpInfo(id);
        }

        /// <summary>
        /// deletes a Organization by id Deletes an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrganizationByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteOrganizationById");

            var localVarPath = "./organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Organization by id Deletes an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrganizationByIdAsync (Guid? id)
        {
             await DeleteOrganizationByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deletes a Organization by id Deletes an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrganizationByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteOrganizationById");

            var localVarPath = "./organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrganizationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Room by id Deletes an existing Building at a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns></returns>
        public void DeleteRoomFromBuildingById (Guid? locationId, Guid? buildingId, Guid? roomId)
        {
             DeleteRoomFromBuildingByIdWithHttpInfo(locationId, buildingId, roomId);
        }

        /// <summary>
        /// deletes a Room by id Deletes an existing Building at a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRoomFromBuildingByIdWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->DeleteRoomFromBuildingById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->DeleteRoomFromBuildingById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->DeleteRoomFromBuildingById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRoomFromBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Room by id Deletes an existing Building at a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoomFromBuildingByIdAsync (Guid? locationId, Guid? buildingId, Guid? roomId)
        {
             await DeleteRoomFromBuildingByIdAsyncWithHttpInfo(locationId, buildingId, roomId);

        }

        /// <summary>
        /// deletes a Room by id Deletes an existing Building at a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoomFromBuildingByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->DeleteRoomFromBuildingById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->DeleteRoomFromBuildingById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->DeleteRoomFromBuildingById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRoomFromBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Volunteer by id Deletes an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteVolunteerById (Guid? id)
        {
             DeleteVolunteerByIdWithHttpInfo(id);
        }

        /// <summary>
        /// deletes a Volunteer by id Deletes an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteVolunteerByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteVolunteerById");

            var localVarPath = "./volunteers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVolunteerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes a Volunteer by id Deletes an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVolunteerByIdAsync (Guid? id)
        {
             await DeleteVolunteerByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deletes a Volunteer by id Deletes an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVolunteerByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->DeleteVolunteerById");

            var localVarPath = "./volunteers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVolunteerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// reports whether the API is up and running used to check on the api status, but returns no content
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetApiHealth ()
        {
             GetApiHealthWithHttpInfo();
        }

        /// <summary>
        /// reports whether the API is up and running used to check on the api status, but returns no content
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetApiHealthWithHttpInfo ()
        {

            var localVarPath = "./health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiHealth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// reports whether the API is up and running used to check on the api status, but returns no content
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetApiHealthAsync ()
        {
             await GetApiHealthAsyncWithHttpInfo();

        }

        /// <summary>
        /// reports whether the API is up and running used to check on the api status, but returns no content
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetApiHealthAsyncWithHttpInfo ()
        {

            var localVarPath = "./health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiHealth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Location</returns>
        public Location GetBuildingAtLocationById (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null)
        {
             ApiResponse<Location> localVarResponse = GetBuildingAtLocationByIdWithHttpInfo(locationId, buildingId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        public ApiResponse< Location > GetBuildingAtLocationByIdWithHttpInfo (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetBuildingAtLocationById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->GetBuildingAtLocationById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildingAtLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Location>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Location) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Location)));
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> GetBuildingAtLocationByIdAsync (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null)
        {
             ApiResponse<Location> localVarResponse = await GetBuildingAtLocationByIdAsyncWithHttpInfo(locationId, buildingId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Location>> GetBuildingAtLocationByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetBuildingAtLocationById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->GetBuildingAtLocationById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildingAtLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Location>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Location) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Location)));
        }

        /// <summary>
        /// returns a specific Building for the Rescue Returns details about a specific Building 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Building</returns>
        public Building GetBuildingById (Guid? id, int? limit = null, int? offset = null)
        {
             ApiResponse<Building> localVarResponse = GetBuildingByIdWithHttpInfo(id, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns a specific Building for the Rescue Returns details about a specific Building 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Building</returns>
        public ApiResponse< Building > GetBuildingByIdWithHttpInfo (Guid? id, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetBuildingById");

            var localVarPath = "./buildings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Building>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Building) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Building)));
        }

        /// <summary>
        /// returns a specific Building for the Rescue Returns details about a specific Building 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Building</returns>
        public async System.Threading.Tasks.Task<Building> GetBuildingByIdAsync (Guid? id, int? limit = null, int? offset = null)
        {
             ApiResponse<Building> localVarResponse = await GetBuildingByIdAsyncWithHttpInfo(id, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns a specific Building for the Rescue Returns details about a specific Building 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Building)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Building>> GetBuildingByIdAsyncWithHttpInfo (Guid? id, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetBuildingById");

            var localVarPath = "./buildings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Building>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Building) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Building)));
        }

        /// <summary>
        /// Returns a (filtered) collection of buildings affiliated withthe Rescue With no parameters, returns all Buildings affiliated with the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Building&gt;</returns>
        public List<Building> GetBuildings (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Building>> localVarResponse = GetBuildingsWithHttpInfo(limit, offset, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a (filtered) collection of buildings affiliated withthe Rescue With no parameters, returns all Buildings affiliated with the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Building&gt;</returns>
        public ApiResponse< List<Building> > GetBuildingsWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Building>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Building>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Building>)));
        }

        /// <summary>
        /// Returns a (filtered) collection of buildings affiliated withthe Rescue With no parameters, returns all Buildings affiliated with the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Building&gt;</returns>
        public async System.Threading.Tasks.Task<List<Building>> GetBuildingsAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Building>> localVarResponse = await GetBuildingsAsyncWithHttpInfo(limit, offset, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a (filtered) collection of buildings affiliated withthe Rescue With no parameters, returns all Buildings affiliated with the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Building&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Building>>> GetBuildingsAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Building>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Building>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Building>)));
        }

        /// <summary>
        /// returns all buildings at a Location With no parameters, returns all Buildings at the specified Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Building&gt;</returns>
        public List<Building> GetBuildingsAtLocation (Guid? locationId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Building>> localVarResponse = GetBuildingsAtLocationWithHttpInfo(locationId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns all buildings at a Location With no parameters, returns all Buildings at the specified Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Building&gt;</returns>
        public ApiResponse< List<Building> > GetBuildingsAtLocationWithHttpInfo (Guid? locationId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetBuildingsAtLocation");

            var localVarPath = "./locations/{locationId}/buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildingsAtLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Building>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Building>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Building>)));
        }

        /// <summary>
        /// returns all buildings at a Location With no parameters, returns all Buildings at the specified Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Building&gt;</returns>
        public async System.Threading.Tasks.Task<List<Building>> GetBuildingsAtLocationAsync (Guid? locationId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Building>> localVarResponse = await GetBuildingsAtLocationAsyncWithHttpInfo(locationId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns all buildings at a Location With no parameters, returns all Buildings at the specified Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Building&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Building>>> GetBuildingsAtLocationAsyncWithHttpInfo (Guid? locationId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetBuildingsAtLocation");

            var localVarPath = "./locations/{locationId}/buildings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildingsAtLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Building>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Building>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Building>)));
        }

        /// <summary>
        /// retrieves a Cat by id Gets an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Cat</returns>
        public Cat GetCatById (Guid? id)
        {
             ApiResponse<Cat> localVarResponse = GetCatByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieves a Cat by id Gets an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Cat</returns>
        public ApiResponse< Cat > GetCatByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetCatById");

            var localVarPath = "./cats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Cat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Cat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cat)));
        }

        /// <summary>
        /// retrieves a Cat by id Gets an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Cat</returns>
        public async System.Threading.Tasks.Task<Cat> GetCatByIdAsync (Guid? id)
        {
             ApiResponse<Cat> localVarResponse = await GetCatByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieves a Cat by id Gets an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Cat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Cat>> GetCatByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetCatById");

            var localVarPath = "./cats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Cat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Cat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cat)));
        }

        /// <summary>
        /// retrieves a Contact by id Gets an existing Contact by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Contact</returns>
        public Contact GetContactById (Guid? id)
        {
             ApiResponse<Contact> localVarResponse = GetContactByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieves a Contact by id Gets an existing Contact by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > GetContactByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetContactById");

            var localVarPath = "./contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// retrieves a Contact by id Gets an existing Contact by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> GetContactByIdAsync (Guid? id)
        {
             ApiResponse<Contact> localVarResponse = await GetContactByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieves a Contact by id Gets an existing Contact by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetContactById");

            var localVarPath = "./contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// retrieves counties for the provided state Given a state, return an alpha list of counties in that state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetCountiesByState (string state, int? limit = null, int? offset = null)
        {
             ApiResponse<List<string>> localVarResponse = GetCountiesByStateWithHttpInfo(state, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieves counties for the provided state Given a state, return an alpha list of counties in that state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetCountiesByStateWithHttpInfo (string state, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StaffApi->GetCountiesByState");

            var localVarPath = "./counties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountiesByState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// retrieves counties for the provided state Given a state, return an alpha list of counties in that state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetCountiesByStateAsync (string state, int? limit = null, int? offset = null)
        {
             ApiResponse<List<string>> localVarResponse = await GetCountiesByStateAsyncWithHttpInfo(state, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieves counties for the provided state Given a state, return an alpha list of counties in that state
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetCountiesByStateAsyncWithHttpInfo (string state, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StaffApi->GetCountiesByState");

            var localVarPath = "./counties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountiesByState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// retrieves a Dog by id Gets an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Dog</returns>
        public Dog GetDogById (Guid? id)
        {
             ApiResponse<Dog> localVarResponse = GetDogByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieves a Dog by id Gets an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Dog</returns>
        public ApiResponse< Dog > GetDogByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetDogById");

            var localVarPath = "./dogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Dog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dog)));
        }

        /// <summary>
        /// retrieves a Dog by id Gets an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Dog</returns>
        public async System.Threading.Tasks.Task<Dog> GetDogByIdAsync (Guid? id)
        {
             ApiResponse<Dog> localVarResponse = await GetDogByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieves a Dog by id Gets an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Dog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dog>> GetDogByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetDogById");

            var localVarPath = "./dogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Dog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dog)));
        }

        /// <summary>
        /// retrieves a Donor by id Gets an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Donor</returns>
        public Donor GetDonorById (Guid? id)
        {
             ApiResponse<Donor> localVarResponse = GetDonorByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieves a Donor by id Gets an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Donor</returns>
        public ApiResponse< Donor > GetDonorByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetDonorById");

            var localVarPath = "./donors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDonorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Donor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Donor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Donor)));
        }

        /// <summary>
        /// retrieves a Donor by id Gets an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Donor</returns>
        public async System.Threading.Tasks.Task<Donor> GetDonorByIdAsync (Guid? id)
        {
             ApiResponse<Donor> localVarResponse = await GetDonorByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieves a Donor by id Gets an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Donor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Donor>> GetDonorByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetDonorById");

            var localVarPath = "./donors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDonorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Donor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Donor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Donor)));
        }

        /// <summary>
        /// searches animal rescue doners With no parameters, returns all Donors. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Donor&gt;</returns>
        public List<Donor> GetDonors (string state, string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Donor>> localVarResponse = GetDonorsWithHttpInfo(state, searchString, limit, offset, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches animal rescue doners With no parameters, returns all Donors. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Donor&gt;</returns>
        public ApiResponse< List<Donor> > GetDonorsWithHttpInfo (string state, string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StaffApi->GetDonors");

            var localVarPath = "./donors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDonors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Donor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Donor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Donor>)));
        }

        /// <summary>
        /// searches animal rescue doners With no parameters, returns all Donors. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Donor&gt;</returns>
        public async System.Threading.Tasks.Task<List<Donor>> GetDonorsAsync (string state, string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Donor>> localVarResponse = await GetDonorsAsyncWithHttpInfo(state, searchString, limit, offset, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches animal rescue doners With no parameters, returns all Donors. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Donor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Donor>>> GetDonorsAsyncWithHttpInfo (string state, string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling StaffApi->GetDonors");

            var localVarPath = "./donors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDonors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Donor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Donor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Donor>)));
        }

        /// <summary>
        /// returns a specific Enclosure for the Rescue Returns details about a specific Enclosure 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Enclosure</returns>
        public Enclosure GetEnclosureById (Guid? id, int? limit = null, int? offset = null)
        {
             ApiResponse<Enclosure> localVarResponse = GetEnclosureByIdWithHttpInfo(id, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns a specific Enclosure for the Rescue Returns details about a specific Enclosure 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Enclosure</returns>
        public ApiResponse< Enclosure > GetEnclosureByIdWithHttpInfo (Guid? id, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetEnclosureById");

            var localVarPath = "./enclosures/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnclosureById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Enclosure>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Enclosure) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Enclosure)));
        }

        /// <summary>
        /// returns a specific Enclosure for the Rescue Returns details about a specific Enclosure 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Enclosure</returns>
        public async System.Threading.Tasks.Task<Enclosure> GetEnclosureByIdAsync (Guid? id, int? limit = null, int? offset = null)
        {
             ApiResponse<Enclosure> localVarResponse = await GetEnclosureByIdAsyncWithHttpInfo(id, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns a specific Enclosure for the Rescue Returns details about a specific Enclosure 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Enclosure)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Enclosure>> GetEnclosureByIdAsyncWithHttpInfo (Guid? id, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetEnclosureById");

            var localVarPath = "./enclosures/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnclosureById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Enclosure>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Enclosure) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Enclosure)));
        }

        /// <summary>
        /// searches all Enclosures for the Rescue With no parameters, returns all Enclosures for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Enclosure&gt;</returns>
        public List<Enclosure> GetEnclosures (int? limit = null, int? offset = null)
        {
             ApiResponse<List<Enclosure>> localVarResponse = GetEnclosuresWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches all Enclosures for the Rescue With no parameters, returns all Enclosures for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Enclosure&gt;</returns>
        public ApiResponse< List<Enclosure> > GetEnclosuresWithHttpInfo (int? limit = null, int? offset = null)
        {

            var localVarPath = "./enclosures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnclosures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Enclosure>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Enclosure>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Enclosure>)));
        }

        /// <summary>
        /// searches all Enclosures for the Rescue With no parameters, returns all Enclosures for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Enclosure&gt;</returns>
        public async System.Threading.Tasks.Task<List<Enclosure>> GetEnclosuresAsync (int? limit = null, int? offset = null)
        {
             ApiResponse<List<Enclosure>> localVarResponse = await GetEnclosuresAsyncWithHttpInfo(limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches all Enclosures for the Rescue With no parameters, returns all Enclosures for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Enclosure&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Enclosure>>> GetEnclosuresAsyncWithHttpInfo (int? limit = null, int? offset = null)
        {

            var localVarPath = "./enclosures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnclosures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Enclosure>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Enclosure>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Enclosure>)));
        }

        /// <summary>
        /// retrieves a Foster by id Gets an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Foster</returns>
        public Foster GetFosterById (Guid? id)
        {
             ApiResponse<Foster> localVarResponse = GetFosterByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieves a Foster by id Gets an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Foster</returns>
        public ApiResponse< Foster > GetFosterByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetFosterById");

            var localVarPath = "./fosters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFosterById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Foster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Foster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Foster)));
        }

        /// <summary>
        /// retrieves a Foster by id Gets an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Foster</returns>
        public async System.Threading.Tasks.Task<Foster> GetFosterByIdAsync (Guid? id)
        {
             ApiResponse<Foster> localVarResponse = await GetFosterByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieves a Foster by id Gets an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Foster)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Foster>> GetFosterByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetFosterById");

            var localVarPath = "./fosters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFosterById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Foster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Foster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Foster)));
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Kennel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Kennel</returns>
        public Kennel GetKennelById (Guid? id, int? limit = null, int? offset = null)
        {
             ApiResponse<Kennel> localVarResponse = GetKennelByIdWithHttpInfo(id, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Kennel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Kennel</returns>
        public ApiResponse< Kennel > GetKennelByIdWithHttpInfo (Guid? id, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetKennelById");

            var localVarPath = "./kennels/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKennelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Kennel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Kennel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Kennel)));
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Kennel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Kennel</returns>
        public async System.Threading.Tasks.Task<Kennel> GetKennelByIdAsync (Guid? id, int? limit = null, int? offset = null)
        {
             ApiResponse<Kennel> localVarResponse = await GetKennelByIdAsyncWithHttpInfo(id, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Kennel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Kennel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Kennel>> GetKennelByIdAsyncWithHttpInfo (Guid? id, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetKennelById");

            var localVarPath = "./kennels/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKennelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Kennel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Kennel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Kennel)));
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Room 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Kennel</returns>
        public Kennel GetKennelFromRoomById (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId, int? limit = null, int? offset = null)
        {
             ApiResponse<Kennel> localVarResponse = GetKennelFromRoomByIdWithHttpInfo(locationId, buildingId, roomId, kennelId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Room 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Kennel</returns>
        public ApiResponse< Kennel > GetKennelFromRoomByIdWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetKennelFromRoomById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->GetKennelFromRoomById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->GetKennelFromRoomById");
            // verify the required parameter 'kennelId' is set
            if (kennelId == null)
                throw new ApiException(400, "Missing required parameter 'kennelId' when calling StaffApi->GetKennelFromRoomById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (kennelId != null) localVarPathParams.Add("kennelId", this.Configuration.ApiClient.ParameterToString(kennelId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKennelFromRoomById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Kennel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Kennel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Kennel)));
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Room 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Kennel</returns>
        public async System.Threading.Tasks.Task<Kennel> GetKennelFromRoomByIdAsync (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId, int? limit = null, int? offset = null)
        {
             ApiResponse<Kennel> localVarResponse = await GetKennelFromRoomByIdAsyncWithHttpInfo(locationId, buildingId, roomId, kennelId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Room 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Kennel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Kennel>> GetKennelFromRoomByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetKennelFromRoomById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->GetKennelFromRoomById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->GetKennelFromRoomById");
            // verify the required parameter 'kennelId' is set
            if (kennelId == null)
                throw new ApiException(400, "Missing required parameter 'kennelId' when calling StaffApi->GetKennelFromRoomById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (kennelId != null) localVarPathParams.Add("kennelId", this.Configuration.ApiClient.ParameterToString(kennelId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKennelFromRoomById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Kennel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Kennel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Kennel)));
        }

        /// <summary>
        /// searches all Kennels for the Rescue With no parameters, returns all Kennels for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Kennel&gt;</returns>
        public List<Kennel> GetKennels (int? limit = null, int? offset = null)
        {
             ApiResponse<List<Kennel>> localVarResponse = GetKennelsWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches all Kennels for the Rescue With no parameters, returns all Kennels for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Kennel&gt;</returns>
        public ApiResponse< List<Kennel> > GetKennelsWithHttpInfo (int? limit = null, int? offset = null)
        {

            var localVarPath = "./kennels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKennels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Kennel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Kennel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Kennel>)));
        }

        /// <summary>
        /// searches all Kennels for the Rescue With no parameters, returns all Kennels for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Kennel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Kennel>> GetKennelsAsync (int? limit = null, int? offset = null)
        {
             ApiResponse<List<Kennel>> localVarResponse = await GetKennelsAsyncWithHttpInfo(limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches all Kennels for the Rescue With no parameters, returns all Kennels for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Kennel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Kennel>>> GetKennelsAsyncWithHttpInfo (int? limit = null, int? offset = null)
        {

            var localVarPath = "./kennels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKennels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Kennel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Kennel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Kennel>)));
        }

        /// <summary>
        /// returns all kennels in a Room With no parameters, returns all kennels in a Room
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Kennel&gt;</returns>
        public List<Kennel> GetKennelsInRoom (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Kennel>> localVarResponse = GetKennelsInRoomWithHttpInfo(locationId, buildingId, roomId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns all kennels in a Room With no parameters, returns all kennels in a Room
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Kennel&gt;</returns>
        public ApiResponse< List<Kennel> > GetKennelsInRoomWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetKennelsInRoom");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->GetKennelsInRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->GetKennelsInRoom");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/room/{roomId}/kennels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKennelsInRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Kennel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Kennel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Kennel>)));
        }

        /// <summary>
        /// returns all kennels in a Room With no parameters, returns all kennels in a Room
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Kennel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Kennel>> GetKennelsInRoomAsync (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Kennel>> localVarResponse = await GetKennelsInRoomAsyncWithHttpInfo(locationId, buildingId, roomId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns all kennels in a Room With no parameters, returns all kennels in a Room
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Kennel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Kennel>>> GetKennelsInRoomAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetKennelsInRoom");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->GetKennelsInRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->GetKennelsInRoom");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/room/{roomId}/kennels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKennelsInRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Kennel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Kennel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Kennel>)));
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Location</returns>
        public Location GetLocationById (Guid? id, int? limit = null, int? offset = null)
        {
             ApiResponse<Location> localVarResponse = GetLocationByIdWithHttpInfo(id, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Location</returns>
        public ApiResponse< Location > GetLocationByIdWithHttpInfo (Guid? id, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetLocationById");

            var localVarPath = "./locations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Location>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Location) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Location)));
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> GetLocationByIdAsync (Guid? id, int? limit = null, int? offset = null)
        {
             ApiResponse<Location> localVarResponse = await GetLocationByIdAsyncWithHttpInfo(id, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Location 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Location>> GetLocationByIdAsyncWithHttpInfo (Guid? id, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetLocationById");

            var localVarPath = "./locations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Location>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Location) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Location)));
        }

        /// <summary>
        /// searches all locations for the Rescue With no parameters, returns all Locations for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Location&gt;</returns>
        public List<Location> GetLocations (int? limit = null, int? offset = null)
        {
             ApiResponse<List<Location>> localVarResponse = GetLocationsWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches all locations for the Rescue With no parameters, returns all Locations for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Location&gt;</returns>
        public ApiResponse< List<Location> > GetLocationsWithHttpInfo (int? limit = null, int? offset = null)
        {

            var localVarPath = "./locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Location>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Location>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Location>)));
        }

        /// <summary>
        /// searches all locations for the Rescue With no parameters, returns all Locations for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Location&gt;</returns>
        public async System.Threading.Tasks.Task<List<Location>> GetLocationsAsync (int? limit = null, int? offset = null)
        {
             ApiResponse<List<Location>> localVarResponse = await GetLocationsAsyncWithHttpInfo(limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches all locations for the Rescue With no parameters, returns all Locations for the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Location&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Location>>> GetLocationsAsyncWithHttpInfo (int? limit = null, int? offset = null)
        {

            var localVarPath = "./locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Location>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Location>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Location>)));
        }

        /// <summary>
        /// retrieves a Organization by id Gets an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Organization</returns>
        public Organization GetOrganizationById (Guid? id)
        {
             ApiResponse<Organization> localVarResponse = GetOrganizationByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieves a Organization by id Gets an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Organization</returns>
        public ApiResponse< Organization > GetOrganizationByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetOrganizationById");

            var localVarPath = "./organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Organization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        /// retrieves a Organization by id Gets an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> GetOrganizationByIdAsync (Guid? id)
        {
             ApiResponse<Organization> localVarResponse = await GetOrganizationByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieves a Organization by id Gets an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrganizationByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetOrganizationById");

            var localVarPath = "./organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Organization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Room 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Room</returns>
        public Room GetRoomInBuildingById (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null)
        {
             ApiResponse<Room> localVarResponse = GetRoomInBuildingByIdWithHttpInfo(locationId, buildingId, roomId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Room 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of Room</returns>
        public ApiResponse< Room > GetRoomInBuildingByIdWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetRoomInBuildingById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->GetRoomInBuildingById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->GetRoomInBuildingById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomInBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Room>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Room) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Room)));
        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Room 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of Room</returns>
        public async System.Threading.Tasks.Task<Room> GetRoomInBuildingByIdAsync (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null)
        {
             ApiResponse<Room> localVarResponse = await GetRoomInBuildingByIdAsyncWithHttpInfo(locationId, buildingId, roomId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns a specific location for the Rescue Returns details about a specific Room 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (Room)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Room>> GetRoomInBuildingByIdAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, Guid? roomId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetRoomInBuildingById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->GetRoomInBuildingById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->GetRoomInBuildingById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomInBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Room>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Room) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Room)));
        }

        /// <summary>
        /// gets all Rooms in a Building at a Location With no parameters, returns all Rooms in a Building
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>List&lt;Room&gt;</returns>
        public List<Room> GetRoomsInBuilding (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Room>> localVarResponse = GetRoomsInBuildingWithHttpInfo(locationId, buildingId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// gets all Rooms in a Building at a Location With no parameters, returns all Rooms in a Building
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>ApiResponse of List&lt;Room&gt;</returns>
        public ApiResponse< List<Room> > GetRoomsInBuildingWithHttpInfo (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetRoomsInBuilding");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->GetRoomsInBuilding");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomsInBuilding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Room>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Room>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Room>)));
        }

        /// <summary>
        /// gets all Rooms in a Building at a Location With no parameters, returns all Rooms in a Building
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of List&lt;Room&gt;</returns>
        public async System.Threading.Tasks.Task<List<Room>> GetRoomsInBuildingAsync (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Room>> localVarResponse = await GetRoomsInBuildingAsyncWithHttpInfo(locationId, buildingId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// gets all Rooms in a Building at a Location With no parameters, returns all Rooms in a Building
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Room&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Room>>> GetRoomsInBuildingAsyncWithHttpInfo (Guid? locationId, Guid? buildingId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->GetRoomsInBuilding");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->GetRoomsInBuilding");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomsInBuilding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Room>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Room>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Room>)));
        }

        /// <summary>
        /// retrieves a Volunteer by id Gets an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Volunteer</returns>
        public Volunteer GetVolunteerById (Guid? id)
        {
             ApiResponse<Volunteer> localVarResponse = GetVolunteerByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrieves a Volunteer by id Gets an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Volunteer</returns>
        public ApiResponse< Volunteer > GetVolunteerByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetVolunteerById");

            var localVarPath = "./volunteers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVolunteerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Volunteer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Volunteer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Volunteer)));
        }

        /// <summary>
        /// retrieves a Volunteer by id Gets an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Volunteer</returns>
        public async System.Threading.Tasks.Task<Volunteer> GetVolunteerByIdAsync (Guid? id)
        {
             ApiResponse<Volunteer> localVarResponse = await GetVolunteerByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrieves a Volunteer by id Gets an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Volunteer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Volunteer>> GetVolunteerByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->GetVolunteerById");

            var localVarPath = "./volunteers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVolunteerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Volunteer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Volunteer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Volunteer)));
        }

        /// <summary>
        /// support for animal intake process Base endopoints returns and empty Intake array
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Intake&gt;</returns>
        public List<Intake> IntakeInformation (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Intake>> localVarResponse = IntakeInformationWithHttpInfo(limit, offset, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// support for animal intake process Base endopoints returns and empty Intake array
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Intake&gt;</returns>
        public ApiResponse< List<Intake> > IntakeInformationWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./intakes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntakeInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Intake>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Intake>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Intake>)));
        }

        /// <summary>
        /// support for animal intake process Base endopoints returns and empty Intake array
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Intake&gt;</returns>
        public async System.Threading.Tasks.Task<List<Intake>> IntakeInformationAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Intake>> localVarResponse = await IntakeInformationAsyncWithHttpInfo(limit, offset, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// support for animal intake process Base endopoints returns and empty Intake array
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Intake&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Intake>>> IntakeInformationAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./intakes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntakeInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Intake>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Intake>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Intake>)));
        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns></returns>
        public void PatchBuildingAtLocationById (Building body, Guid? locationId, Guid? buildingId)
        {
             PatchBuildingAtLocationByIdWithHttpInfo(body, locationId, buildingId);
        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchBuildingAtLocationByIdWithHttpInfo (Building body, Guid? locationId, Guid? buildingId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchBuildingAtLocationById");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->PatchBuildingAtLocationById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->PatchBuildingAtLocationById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchBuildingAtLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchBuildingAtLocationByIdAsync (Building body, Guid? locationId, Guid? buildingId)
        {
             await PatchBuildingAtLocationByIdAsyncWithHttpInfo(body, locationId, buildingId);

        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchBuildingAtLocationByIdAsyncWithHttpInfo (Building body, Guid? locationId, Guid? buildingId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchBuildingAtLocationById");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->PatchBuildingAtLocationById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->PatchBuildingAtLocationById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchBuildingAtLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Building by id Updates an existing Building by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Building with fields to patch</param>
        /// <param name="id">unique id of Building to patch</param>
        /// <returns></returns>
        public void PatchBuildingById (Building body, Guid? id)
        {
             PatchBuildingByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Building by id Updates an existing Building by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Building with fields to patch</param>
        /// <param name="id">unique id of Building to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchBuildingByIdWithHttpInfo (Building body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchBuildingById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchBuildingById");

            var localVarPath = "./buildings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Building by id Updates an existing Building by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Building with fields to patch</param>
        /// <param name="id">unique id of Building to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchBuildingByIdAsync (Building body, Guid? id)
        {
             await PatchBuildingByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Building by id Updates an existing Building by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Building with fields to patch</param>
        /// <param name="id">unique id of Building to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchBuildingByIdAsyncWithHttpInfo (Building body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchBuildingById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchBuildingById");

            var localVarPath = "./buildings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Cat by id Updates an existing Cat by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Cat with fields to patch</param>
        /// <param name="id">unique id of Cat to patch</param>
        /// <returns></returns>
        public void PatchCatById (Cat body, Guid? id)
        {
             PatchCatByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Cat by id Updates an existing Cat by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Cat with fields to patch</param>
        /// <param name="id">unique id of Cat to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchCatByIdWithHttpInfo (Cat body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchCatById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchCatById");

            var localVarPath = "./cats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Cat by id Updates an existing Cat by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Cat with fields to patch</param>
        /// <param name="id">unique id of Cat to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchCatByIdAsync (Cat body, Guid? id)
        {
             await PatchCatByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Cat by id Updates an existing Cat by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Cat with fields to patch</param>
        /// <param name="id">unique id of Cat to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchCatByIdAsyncWithHttpInfo (Cat body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchCatById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchCatById");

            var localVarPath = "./cats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Contact by id Updates an existing Contact by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Contact with fields to patch</param>
        /// <param name="id">unique id of Contact to patch</param>
        /// <returns></returns>
        public void PatchContactById (Contact body, Guid? id)
        {
             PatchContactByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Contact by id Updates an existing Contact by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Contact with fields to patch</param>
        /// <param name="id">unique id of Contact to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchContactByIdWithHttpInfo (Contact body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchContactById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchContactById");

            var localVarPath = "./contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Contact by id Updates an existing Contact by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Contact with fields to patch</param>
        /// <param name="id">unique id of Contact to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchContactByIdAsync (Contact body, Guid? id)
        {
             await PatchContactByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Contact by id Updates an existing Contact by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Contact with fields to patch</param>
        /// <param name="id">unique id of Contact to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchContactByIdAsyncWithHttpInfo (Contact body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchContactById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchContactById");

            var localVarPath = "./contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Dog by id Updates an existing Dog by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Dog with fields to patch</param>
        /// <param name="id">unique id of Dog to patch</param>
        /// <returns></returns>
        public void PatchDogById (Dog body, Guid? id)
        {
             PatchDogByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Dog by id Updates an existing Dog by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Dog with fields to patch</param>
        /// <param name="id">unique id of Dog to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchDogByIdWithHttpInfo (Dog body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchDogById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchDogById");

            var localVarPath = "./dogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchDogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Dog by id Updates an existing Dog by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Dog with fields to patch</param>
        /// <param name="id">unique id of Dog to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchDogByIdAsync (Dog body, Guid? id)
        {
             await PatchDogByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Dog by id Updates an existing Dog by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Dog with fields to patch</param>
        /// <param name="id">unique id of Dog to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchDogByIdAsyncWithHttpInfo (Dog body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchDogById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchDogById");

            var localVarPath = "./dogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchDogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Donor by id Updates an existing Donor by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Donor with fields to patch</param>
        /// <param name="id">unique id of Donor to patch</param>
        /// <returns></returns>
        public void PatchDonorById (Donor body, Guid? id)
        {
             PatchDonorByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Donor by id Updates an existing Donor by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Donor with fields to patch</param>
        /// <param name="id">unique id of Donor to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchDonorByIdWithHttpInfo (Donor body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchDonorById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchDonorById");

            var localVarPath = "./donors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchDonorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Donor by id Updates an existing Donor by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Donor with fields to patch</param>
        /// <param name="id">unique id of Donor to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchDonorByIdAsync (Donor body, Guid? id)
        {
             await PatchDonorByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Donor by id Updates an existing Donor by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Donor with fields to patch</param>
        /// <param name="id">unique id of Donor to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchDonorByIdAsyncWithHttpInfo (Donor body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchDonorById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchDonorById");

            var localVarPath = "./donors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchDonorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Foster by id Updates an existing Foster by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Foster with fields to patch</param>
        /// <param name="id">unique id of Foster to patch</param>
        /// <returns></returns>
        public void PatchFosterById (Foster body, Guid? id)
        {
             PatchFosterByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Foster by id Updates an existing Foster by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Foster with fields to patch</param>
        /// <param name="id">unique id of Foster to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchFosterByIdWithHttpInfo (Foster body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchFosterById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchFosterById");

            var localVarPath = "./fosters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchFosterById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Foster by id Updates an existing Foster by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Foster with fields to patch</param>
        /// <param name="id">unique id of Foster to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchFosterByIdAsync (Foster body, Guid? id)
        {
             await PatchFosterByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Foster by id Updates an existing Foster by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Foster with fields to patch</param>
        /// <param name="id">unique id of Foster to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchFosterByIdAsyncWithHttpInfo (Foster body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchFosterById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchFosterById");

            var localVarPath = "./fosters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchFosterById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id">unique id of Kennel to patch</param>
        /// <returns></returns>
        public void PatchKennelById (Kennel body, Guid? id)
        {
             PatchKennelByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id">unique id of Kennel to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchKennelByIdWithHttpInfo (Kennel body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchKennelById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchKennelById");

            var localVarPath = "./kennels/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchKennelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id">unique id of Kennel to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchKennelByIdAsync (Kennel body, Guid? id)
        {
             await PatchKennelByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id">unique id of Kennel to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchKennelByIdAsyncWithHttpInfo (Kennel body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchKennelById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchKennelById");

            var localVarPath = "./kennels/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchKennelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns></returns>
        public void PatchKennelInRoomById (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
             PatchKennelInRoomByIdWithHttpInfo(body, locationId, buildingId, roomId, kennelId);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchKennelInRoomByIdWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchKennelInRoomById");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->PatchKennelInRoomById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->PatchKennelInRoomById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->PatchKennelInRoomById");
            // verify the required parameter 'kennelId' is set
            if (kennelId == null)
                throw new ApiException(400, "Missing required parameter 'kennelId' when calling StaffApi->PatchKennelInRoomById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (kennelId != null) localVarPathParams.Add("kennelId", this.Configuration.ApiClient.ParameterToString(kennelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchKennelInRoomById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchKennelInRoomByIdAsync (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
             await PatchKennelInRoomByIdAsyncWithHttpInfo(body, locationId, buildingId, roomId, kennelId);

        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchKennelInRoomByIdAsyncWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchKennelInRoomById");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->PatchKennelInRoomById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->PatchKennelInRoomById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->PatchKennelInRoomById");
            // verify the required parameter 'kennelId' is set
            if (kennelId == null)
                throw new ApiException(400, "Missing required parameter 'kennelId' when calling StaffApi->PatchKennelInRoomById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (kennelId != null) localVarPathParams.Add("kennelId", this.Configuration.ApiClient.ParameterToString(kennelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchKennelInRoomById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="id">unique id of Location to patch</param>
        /// <returns></returns>
        public void PatchLocationById (Location body, Guid? id)
        {
             PatchLocationByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="id">unique id of Location to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchLocationByIdWithHttpInfo (Location body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchLocationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchLocationById");

            var localVarPath = "./locations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="id">unique id of Location to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchLocationByIdAsync (Location body, Guid? id)
        {
             await PatchLocationByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="id">unique id of Location to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchLocationByIdAsyncWithHttpInfo (Location body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchLocationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchLocationById");

            var localVarPath = "./locations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Organization by id Updates an existing Organization by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Organization with fields to patch</param>
        /// <param name="id">unique id of Organization to patch</param>
        /// <returns></returns>
        public void PatchOrganizationById (Organization body, Guid? id)
        {
             PatchOrganizationByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Organization by id Updates an existing Organization by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Organization with fields to patch</param>
        /// <param name="id">unique id of Organization to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchOrganizationByIdWithHttpInfo (Organization body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchOrganizationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchOrganizationById");

            var localVarPath = "./organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Organization by id Updates an existing Organization by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Organization with fields to patch</param>
        /// <param name="id">unique id of Organization to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchOrganizationByIdAsync (Organization body, Guid? id)
        {
             await PatchOrganizationByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Organization by id Updates an existing Organization by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Organization with fields to patch</param>
        /// <param name="id">unique id of Organization to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchOrganizationByIdAsyncWithHttpInfo (Organization body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchOrganizationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchOrganizationById");

            var localVarPath = "./organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchOrganizationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Room by id Updates an existing Room by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Room with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns></returns>
        public void PatchRoomInBuildingById (Room body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
             PatchRoomInBuildingByIdWithHttpInfo(body, locationId, buildingId, roomId);
        }

        /// <summary>
        /// updates a Room by id Updates an existing Room by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Room with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchRoomInBuildingByIdWithHttpInfo (Room body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchRoomInBuildingById");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->PatchRoomInBuildingById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->PatchRoomInBuildingById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->PatchRoomInBuildingById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchRoomInBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Room by id Updates an existing Room by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Room with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchRoomInBuildingByIdAsync (Room body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
             await PatchRoomInBuildingByIdAsyncWithHttpInfo(body, locationId, buildingId, roomId);

        }

        /// <summary>
        /// updates a Room by id Updates an existing Room by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Room with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchRoomInBuildingByIdAsyncWithHttpInfo (Room body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchRoomInBuildingById");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->PatchRoomInBuildingById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->PatchRoomInBuildingById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->PatchRoomInBuildingById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchRoomInBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Volunteer by id Updates an existing Volunteer by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Volunteer with fields to patch</param>
        /// <param name="id">unique id of Volunteer to patch</param>
        /// <returns></returns>
        public void PatchVolunteerById (Volunteer body, Guid? id)
        {
             PatchVolunteerByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Volunteer by id Updates an existing Volunteer by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Volunteer with fields to patch</param>
        /// <param name="id">unique id of Volunteer to patch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchVolunteerByIdWithHttpInfo (Volunteer body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchVolunteerById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchVolunteerById");

            var localVarPath = "./volunteers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchVolunteerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Volunteer by id Updates an existing Volunteer by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Volunteer with fields to patch</param>
        /// <param name="id">unique id of Volunteer to patch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchVolunteerByIdAsync (Volunteer body, Guid? id)
        {
             await PatchVolunteerByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Volunteer by id Updates an existing Volunteer by id with only elements that are changing
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Volunteer with fields to patch</param>
        /// <param name="id">unique id of Volunteer to patch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchVolunteerByIdAsyncWithHttpInfo (Volunteer body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->PatchVolunteerById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->PatchVolunteerById");

            var localVarPath = "./volunteers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchVolunteerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// searches all Adoptions at the Rescue With no parameters, returns all Adoptions at the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Adoption&gt;</returns>
        public List<Adoption> SearchAdoptions (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Adoption>> localVarResponse = SearchAdoptionsWithHttpInfo(limit, offset, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches all Adoptions at the Rescue With no parameters, returns all Adoptions at the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Adoption&gt;</returns>
        public ApiResponse< List<Adoption> > SearchAdoptionsWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./adoptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAdoptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Adoption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Adoption>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Adoption>)));
        }

        /// <summary>
        /// searches all Adoptions at the Rescue With no parameters, returns all Adoptions at the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Adoption&gt;</returns>
        public async System.Threading.Tasks.Task<List<Adoption>> SearchAdoptionsAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Adoption>> localVarResponse = await SearchAdoptionsAsyncWithHttpInfo(limit, offset, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches all Adoptions at the Rescue With no parameters, returns all Adoptions at the Rescue 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Adoption&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Adoption>>> SearchAdoptionsAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./adoptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAdoptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Adoption>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Adoption>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Adoption>)));
        }

        /// <summary>
        /// searches cats With no parameters, returns all cats currently in the shelter. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of cat to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid CatColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>List&lt;Cat&gt;</returns>
        public List<Cat> SearchCats (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null)
        {
             ApiResponse<List<Cat>> localVarResponse = SearchCatsWithHttpInfo(limit, offset, fromDate, toDate, name, adoptionStatus, breed, color, gender);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches cats With no parameters, returns all cats currently in the shelter. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of cat to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid CatColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>ApiResponse of List&lt;Cat&gt;</returns>
        public ApiResponse< List<Cat> > SearchCatsWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null)
        {

            var localVarPath = "./cats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (adoptionStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adoptionStatus", adoptionStatus)); // query parameter
            if (breed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breed", breed)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Cat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Cat>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Cat>)));
        }

        /// <summary>
        /// searches cats With no parameters, returns all cats currently in the shelter. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of cat to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid CatColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of List&lt;Cat&gt;</returns>
        public async System.Threading.Tasks.Task<List<Cat>> SearchCatsAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null)
        {
             ApiResponse<List<Cat>> localVarResponse = await SearchCatsAsyncWithHttpInfo(limit, offset, fromDate, toDate, name, adoptionStatus, breed, color, gender);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches cats With no parameters, returns all cats currently in the shelter. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of cat to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid CatColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Cat&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Cat>>> SearchCatsAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null)
        {

            var localVarPath = "./cats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (adoptionStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adoptionStatus", adoptionStatus)); // query parameter
            if (breed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breed", breed)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Cat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Cat>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Cat>)));
        }

        /// <summary>
        /// searches Contact With no parameters, returns all contacts associated with the Rescue. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="gender">One of the valid Gender enumeration values (optional)</param>
        /// <returns>List&lt;Contact&gt;</returns>
        public List<Contact> SearchContact (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, string searchString = null, Gender gender = null)
        {
             ApiResponse<List<Contact>> localVarResponse = SearchContactWithHttpInfo(limit, offset, fromDate, toDate, searchString, gender);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches Contact With no parameters, returns all contacts associated with the Rescue. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="gender">One of the valid Gender enumeration values (optional)</param>
        /// <returns>ApiResponse of List&lt;Contact&gt;</returns>
        public ApiResponse< List<Contact> > SearchContactWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, string searchString = null, Gender gender = null)
        {

            var localVarPath = "./contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contact>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Contact>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contact>)));
        }

        /// <summary>
        /// searches Contact With no parameters, returns all contacts associated with the Rescue. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="gender">One of the valid Gender enumeration values (optional)</param>
        /// <returns>Task of List&lt;Contact&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contact>> SearchContactAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, string searchString = null, Gender gender = null)
        {
             ApiResponse<List<Contact>> localVarResponse = await SearchContactAsyncWithHttpInfo(limit, offset, fromDate, toDate, searchString, gender);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches Contact With no parameters, returns all contacts associated with the Rescue. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="gender">One of the valid Gender enumeration values (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contact&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contact>>> SearchContactAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, string searchString = null, Gender gender = null)
        {

            var localVarPath = "./contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contact>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Contact>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contact>)));
        }

        /// <summary>
        /// searches dogs With no parameters, returns all dogss currently in the shelter. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of dog to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid DogColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>List&lt;Dog&gt;</returns>
        public List<Dog> SearchDog (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null)
        {
             ApiResponse<List<Dog>> localVarResponse = SearchDogWithHttpInfo(limit, offset, fromDate, toDate, name, adoptionStatus, breed, color, gender);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches dogs With no parameters, returns all dogss currently in the shelter. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of dog to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid DogColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>ApiResponse of List&lt;Dog&gt;</returns>
        public ApiResponse< List<Dog> > SearchDogWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null)
        {

            var localVarPath = "./dogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (adoptionStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adoptionStatus", adoptionStatus)); // query parameter
            if (breed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breed", breed)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Dog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dog>)));
        }

        /// <summary>
        /// searches dogs With no parameters, returns all dogss currently in the shelter. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of dog to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid DogColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of List&lt;Dog&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dog>> SearchDogAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null)
        {
             ApiResponse<List<Dog>> localVarResponse = await SearchDogAsyncWithHttpInfo(limit, offset, fromDate, toDate, name, adoptionStatus, breed, color, gender);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches dogs With no parameters, returns all dogss currently in the shelter. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values (optional)</param>
        /// <param name="breed">breed of dog to retrieve (optional)</param>
        /// <param name="color">Specifies one of the valid DogColors (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Dog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Dog>>> SearchDogAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string adoptionStatus = null, string breed = null, string color = null, string gender = null)
        {

            var localVarPath = "./dogs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (adoptionStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "adoptionStatus", adoptionStatus)); // query parameter
            if (breed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "breed", breed)); // query parameter
            if (color != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "color", color)); // query parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Dog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dog>)));
        }

        /// <summary>
        /// searches animal fosters With no parameters, returns all registered Fosters. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Foster&gt;</returns>
        public List<Foster> SearchFosters (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Foster>> localVarResponse = SearchFostersWithHttpInfo(searchString, limit, offset, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches animal fosters With no parameters, returns all registered Fosters. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Foster&gt;</returns>
        public ApiResponse< List<Foster> > SearchFostersWithHttpInfo (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./fosters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchFosters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Foster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Foster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Foster>)));
        }

        /// <summary>
        /// searches animal fosters With no parameters, returns all registered Fosters. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Foster&gt;</returns>
        public async System.Threading.Tasks.Task<List<Foster>> SearchFostersAsync (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Foster>> localVarResponse = await SearchFostersAsyncWithHttpInfo(searchString, limit, offset, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches animal fosters With no parameters, returns all registered Fosters. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Foster&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Foster>>> SearchFostersAsyncWithHttpInfo (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./fosters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchFosters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Foster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Foster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Foster>)));
        }

        /// <summary>
        /// searches inventory By passing in the appropriate options, you can search for available inventory in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up inventory (optional)</param>
        /// <returns>List&lt;InventoryItem&gt;</returns>
        public List<InventoryItem> SearchInventory (int? limit = null, int? offset = null, string searchString = null)
        {
             ApiResponse<List<InventoryItem>> localVarResponse = SearchInventoryWithHttpInfo(limit, offset, searchString);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches inventory By passing in the appropriate options, you can search for available inventory in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up inventory (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItem&gt;</returns>
        public ApiResponse< List<InventoryItem> > SearchInventoryWithHttpInfo (int? limit = null, int? offset = null, string searchString = null)
        {

            var localVarPath = "./inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InventoryItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<InventoryItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InventoryItem>)));
        }

        /// <summary>
        /// searches inventory By passing in the appropriate options, you can search for available inventory in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up inventory (optional)</param>
        /// <returns>Task of List&lt;InventoryItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryItem>> SearchInventoryAsync (int? limit = null, int? offset = null, string searchString = null)
        {
             ApiResponse<List<InventoryItem>> localVarResponse = await SearchInventoryAsyncWithHttpInfo(limit, offset, searchString);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches inventory By passing in the appropriate options, you can search for available inventory in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="searchString">pass an optional search string for looking up inventory (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InventoryItem>>> SearchInventoryAsyncWithHttpInfo (int? limit = null, int? offset = null, string searchString = null)
        {

            var localVarPath = "./inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchInventory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InventoryItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<InventoryItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InventoryItem>)));
        }

        /// <summary>
        /// searches Organization With no parameters, returns all Organizations associated with the Rescue. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>List&lt;Organization&gt;</returns>
        public List<Organization> SearchOrganization (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string gender = null)
        {
             ApiResponse<List<Organization>> localVarResponse = SearchOrganizationWithHttpInfo(limit, offset, fromDate, toDate, name, gender);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches Organization With no parameters, returns all Organizations associated with the Rescue. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        public ApiResponse< List<Organization> > SearchOrganizationWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string gender = null)
        {

            var localVarPath = "./organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Organization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organization>)));
        }

        /// <summary>
        /// searches Organization With no parameters, returns all Organizations associated with the Rescue. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        public async System.Threading.Tasks.Task<List<Organization>> SearchOrganizationAsync (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string gender = null)
        {
             ApiResponse<List<Organization>> localVarResponse = await SearchOrganizationAsyncWithHttpInfo(limit, offset, fromDate, toDate, name, gender);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches Organization With no parameters, returns all Organizations associated with the Rescue. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <param name="name">Specifies a matching pattern for the name (optional)</param>
        /// <param name="gender">Specifies on of the valid Gender (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Organization>>> SearchOrganizationAsyncWithHttpInfo (int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null, DateTime? name = null, string gender = null)
        {

            var localVarPath = "./organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (gender != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gender", gender)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Organization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organization>)));
        }

        /// <summary>
        /// searches volunteers With no parameters, returns all registered Volunteers. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>List&lt;Volunteer&gt;</returns>
        public List<Volunteer> SearchVolunteers (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Volunteer>> localVarResponse = SearchVolunteersWithHttpInfo(searchString, limit, offset, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches volunteers With no parameters, returns all registered Volunteers. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>ApiResponse of List&lt;Volunteer&gt;</returns>
        public ApiResponse< List<Volunteer> > SearchVolunteersWithHttpInfo (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./volunteers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchVolunteers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Volunteer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Volunteer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Volunteer>)));
        }

        /// <summary>
        /// searches volunteers With no parameters, returns all registered Volunteers. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of List&lt;Volunteer&gt;</returns>
        public async System.Threading.Tasks.Task<List<Volunteer>> SearchVolunteersAsync (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Volunteer>> localVarResponse = await SearchVolunteersAsyncWithHttpInfo(searchString, limit, offset, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches volunteers With no parameters, returns all registered Volunteers. Allows filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString">pass an optional search string for looking up Fosters (optional)</param>
        /// <param name="limit">Limits the number of items on a page (optional)</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed (optional)</param>
        /// <param name="fromDate">Specifies the first date to return in a query (optional)</param>
        /// <param name="toDate">Specifies the last date to include in a query (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Volunteer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Volunteer>>> SearchVolunteersAsyncWithHttpInfo (string searchString = null, int? limit = null, int? offset = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "./volunteers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchString != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchString", searchString)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchVolunteers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Volunteer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Volunteer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Volunteer>)));
        }

        /// <summary>
        /// updates a Cat by id Updates an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Cat to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void UpdateCatById (Cat body, Guid? id)
        {
             UpdateCatByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Cat by id Updates an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Cat to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCatByIdWithHttpInfo (Cat body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateCatById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateCatById");

            var localVarPath = "./cats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Cat by id Updates an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Cat to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCatByIdAsync (Cat body, Guid? id)
        {
             await UpdateCatByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Cat by id Updates an existing Cat by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Cat to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCatByIdAsyncWithHttpInfo (Cat body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateCatById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateCatById");

            var localVarPath = "./cats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCatById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Dog by id Updates an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Dog to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void UpdateDogById (Dog body, Guid? id)
        {
             UpdateDogByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Dog by id Updates an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Dog to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateDogByIdWithHttpInfo (Dog body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateDogById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateDogById");

            var localVarPath = "./dogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Dog by id Updates an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Dog to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDogByIdAsync (Dog body, Guid? id)
        {
             await UpdateDogByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Dog by id Updates an existing Dog by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Dog to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDogByIdAsyncWithHttpInfo (Dog body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateDogById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateDogById");

            var localVarPath = "./dogs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Donor by id Updates an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Donor to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void UpdateDonorById (Donor body, Guid? id)
        {
             UpdateDonorByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Donor by id Updates an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Donor to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateDonorByIdWithHttpInfo (Donor body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateDonorById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateDonorById");

            var localVarPath = "./donors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDonorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Donor by id Updates an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Donor to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDonorByIdAsync (Donor body, Guid? id)
        {
             await UpdateDonorByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Donor by id Updates an existing Donor by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Donor to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDonorByIdAsyncWithHttpInfo (Donor body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateDonorById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateDonorById");

            var localVarPath = "./donors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDonorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Foster by id Updates an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Foster to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void UpdateFosterById (Foster body, Guid? id)
        {
             UpdateFosterByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Foster by id Updates an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Foster to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateFosterByIdWithHttpInfo (Foster body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateFosterById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateFosterById");

            var localVarPath = "./fosters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFosterById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Foster by id Updates an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Foster to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFosterByIdAsync (Foster body, Guid? id)
        {
             await UpdateFosterByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Foster by id Updates an existing Foster by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Foster to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFosterByIdAsyncWithHttpInfo (Foster body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateFosterById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateFosterById");

            var localVarPath = "./fosters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFosterById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void UpdateKennelById (Kennel body, Guid? id)
        {
             UpdateKennelByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateKennelByIdWithHttpInfo (Kennel body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateKennelById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateKennelById");

            var localVarPath = "./kennels/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKennelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateKennelByIdAsync (Kennel body, Guid? id)
        {
             await UpdateKennelByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKennelByIdAsyncWithHttpInfo (Kennel body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateKennelById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateKennelById");

            var localVarPath = "./kennels/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKennelById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel in a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns></returns>
        public void UpdateKennelInRoomById (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
             UpdateKennelInRoomByIdWithHttpInfo(body, locationId, buildingId, roomId, kennelId);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel in a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateKennelInRoomByIdWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateKennelInRoomById");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->UpdateKennelInRoomById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->UpdateKennelInRoomById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->UpdateKennelInRoomById");
            // verify the required parameter 'kennelId' is set
            if (kennelId == null)
                throw new ApiException(400, "Missing required parameter 'kennelId' when calling StaffApi->UpdateKennelInRoomById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (kennelId != null) localVarPathParams.Add("kennelId", this.Configuration.ApiClient.ParameterToString(kennelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKennelInRoomById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel in a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateKennelInRoomByIdAsync (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
             await UpdateKennelInRoomByIdAsyncWithHttpInfo(body, locationId, buildingId, roomId, kennelId);

        }

        /// <summary>
        /// updates a Kennel by id Updates an existing Kennel in a Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKennelInRoomByIdAsyncWithHttpInfo (Kennel body, Guid? locationId, Guid? buildingId, Guid? roomId, Guid? kennelId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateKennelInRoomById");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->UpdateKennelInRoomById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->UpdateKennelInRoomById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->UpdateKennelInRoomById");
            // verify the required parameter 'kennelId' is set
            if (kennelId == null)
                throw new ApiException(400, "Missing required parameter 'kennelId' when calling StaffApi->UpdateKennelInRoomById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}/kennels/{kennelId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (kennelId != null) localVarPathParams.Add("kennelId", this.Configuration.ApiClient.ParameterToString(kennelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKennelInRoomById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Location to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void UpdateLocationById (Location body, Guid? id)
        {
             UpdateLocationByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Location to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateLocationByIdWithHttpInfo (Location body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateLocationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateLocationById");

            var localVarPath = "./locations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Location to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateLocationByIdAsync (Location body, Guid? id)
        {
             await UpdateLocationByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Location by id Updates an existing Location by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Location to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLocationByIdAsyncWithHttpInfo (Location body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateLocationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateLocationById");

            var localVarPath = "./locations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Organization by id Updates an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Organization to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void UpdateOrganizationById (Organization body, Guid? id)
        {
             UpdateOrganizationByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Organization by id Updates an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Organization to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateOrganizationByIdWithHttpInfo (Organization body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateOrganizationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateOrganizationById");

            var localVarPath = "./organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrganizationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Organization by id Updates an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Organization to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateOrganizationByIdAsync (Organization body, Guid? id)
        {
             await UpdateOrganizationByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Organization by id Updates an existing Organization by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Organization to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrganizationByIdAsyncWithHttpInfo (Organization body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateOrganizationById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateOrganizationById");

            var localVarPath = "./organizations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrganizationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Room by id Updates an existing Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Room to update</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns></returns>
        public void UpdateRoomInBuildingById (Room body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
             UpdateRoomInBuildingByIdWithHttpInfo(body, locationId, buildingId, roomId);
        }

        /// <summary>
        /// updates a Room by id Updates an existing Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Room to update</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRoomInBuildingByIdWithHttpInfo (Room body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateRoomInBuildingById");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->UpdateRoomInBuildingById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->UpdateRoomInBuildingById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->UpdateRoomInBuildingById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRoomInBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Room by id Updates an existing Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Room to update</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRoomInBuildingByIdAsync (Room body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
             await UpdateRoomInBuildingByIdAsyncWithHttpInfo(body, locationId, buildingId, roomId);

        }

        /// <summary>
        /// updates a Room by id Updates an existing Room by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Room to update</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRoomInBuildingByIdAsyncWithHttpInfo (Room body, Guid? locationId, Guid? buildingId, Guid? roomId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateRoomInBuildingById");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling StaffApi->UpdateRoomInBuildingById");
            // verify the required parameter 'buildingId' is set
            if (buildingId == null)
                throw new ApiException(400, "Missing required parameter 'buildingId' when calling StaffApi->UpdateRoomInBuildingById");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling StaffApi->UpdateRoomInBuildingById");

            var localVarPath = "./locations/{locationId}/buildings/{buildingId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (buildingId != null) localVarPathParams.Add("buildingId", this.Configuration.ApiClient.ParameterToString(buildingId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.Configuration.ApiClient.ParameterToString(roomId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRoomInBuildingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Volunteer by id Updates an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Volunteer to update</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void UpdateVolunteerById (Volunteer body, Guid? id)
        {
             UpdateVolunteerByIdWithHttpInfo(body, id);
        }

        /// <summary>
        /// updates a Volunteer by id Updates an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Volunteer to update</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateVolunteerByIdWithHttpInfo (Volunteer body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateVolunteerById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateVolunteerById");

            var localVarPath = "./volunteers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVolunteerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// updates a Volunteer by id Updates an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Volunteer to update</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateVolunteerByIdAsync (Volunteer body, Guid? id)
        {
             await UpdateVolunteerByIdAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// updates a Volunteer by id Updates an existing Volunteer by id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">unique id of Volunteer to update</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateVolunteerByIdAsyncWithHttpInfo (Volunteer body, Guid? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StaffApi->UpdateVolunteerById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling StaffApi->UpdateVolunteerById");

            var localVarPath = "./volunteers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVolunteerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
