/* 
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Intake
    /// </summary>
    [DataContract]
        public partial class Intake :  IEquatable<Intake>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Intake" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="staffId">staffId (required).</param>
        /// <param name="parNumber">parNumber (required).</param>
        /// <param name="surrenderingPartyId">surrenderingPartyId.</param>
        /// <param name="notes">notes.</param>
        public Intake(Id id = default(Id), string timestamp = default(string), Guid? staffId = default(Guid?), int? parNumber = default(int?), Guid? surrenderingPartyId = default(Guid?), List<Note> notes = default(List<Note>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Intake and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for Intake and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "staffId" is required (not null)
            if (staffId == null)
            {
                throw new InvalidDataException("staffId is a required property for Intake and cannot be null");
            }
            else
            {
                this.StaffId = staffId;
            }
            // to ensure "parNumber" is required (not null)
            if (parNumber == null)
            {
                throw new InvalidDataException("parNumber is a required property for Intake and cannot be null");
            }
            else
            {
                this.ParNumber = parNumber;
            }
            this.SurrenderingPartyId = surrenderingPartyId;
            this.Notes = notes;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Id Id { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets StaffId
        /// </summary>
        [DataMember(Name="staffId", EmitDefaultValue=false)]
        public Guid? StaffId { get; set; }

        /// <summary>
        /// Gets or Sets ParNumber
        /// </summary>
        [DataMember(Name="parNumber", EmitDefaultValue=false)]
        public int? ParNumber { get; set; }

        /// <summary>
        /// Gets or Sets SurrenderingPartyId
        /// </summary>
        [DataMember(Name="surrenderingPartyId", EmitDefaultValue=false)]
        public Guid? SurrenderingPartyId { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<Note> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Intake {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  StaffId: ").Append(StaffId).Append("\n");
            sb.Append("  ParNumber: ").Append(ParNumber).Append("\n");
            sb.Append("  SurrenderingPartyId: ").Append(SurrenderingPartyId).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Intake);
        }

        /// <summary>
        /// Returns true if Intake instances are equal
        /// </summary>
        /// <param name="input">Instance of Intake to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Intake input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.StaffId == input.StaffId ||
                    (this.StaffId != null &&
                    this.StaffId.Equals(input.StaffId))
                ) && 
                (
                    this.ParNumber == input.ParNumber ||
                    (this.ParNumber != null &&
                    this.ParNumber.Equals(input.ParNumber))
                ) && 
                (
                    this.SurrenderingPartyId == input.SurrenderingPartyId ||
                    (this.SurrenderingPartyId != null &&
                    this.SurrenderingPartyId.Equals(input.SurrenderingPartyId))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.StaffId != null)
                    hashCode = hashCode * 59 + this.StaffId.GetHashCode();
                if (this.ParNumber != null)
                    hashCode = hashCode * 59 + this.ParNumber.GetHashCode();
                if (this.SurrenderingPartyId != null)
                    hashCode = hashCode * 59 + this.SurrenderingPartyId.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }
    }
}
