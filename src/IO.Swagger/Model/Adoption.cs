/* 
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Adoption
    /// </summary>
    [DataContract]
        public partial class Adoption :  IEquatable<Adoption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Adoption" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="date">date.</param>
        /// <param name="adoptees">adoptees.</param>
        /// <param name="adoptor">adoptor.</param>
        /// <param name="notes">notes.</param>
        public Adoption(Id id = default(Id), DateTime? date = default(DateTime?), List<BaseAnimalInfo> adoptees = default(List<BaseAnimalInfo>), Contact adoptor = default(Contact), List<Note> notes = default(List<Note>))
        {
            this.Id = id;
            this.Date = date;
            this.Adoptees = adoptees;
            this.Adoptor = adoptor;
            this.Notes = notes;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Id Id { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Adoptees
        /// </summary>
        [DataMember(Name="adoptees", EmitDefaultValue=false)]
        public List<BaseAnimalInfo> Adoptees { get; set; }

        /// <summary>
        /// Gets or Sets Adoptor
        /// </summary>
        [DataMember(Name="adoptor", EmitDefaultValue=false)]
        public Contact Adoptor { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<Note> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Adoption {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Adoptees: ").Append(Adoptees).Append("\n");
            sb.Append("  Adoptor: ").Append(Adoptor).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Adoption);
        }

        /// <summary>
        /// Returns true if Adoption instances are equal
        /// </summary>
        /// <param name="input">Instance of Adoption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Adoption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Adoptees == input.Adoptees ||
                    this.Adoptees != null &&
                    input.Adoptees != null &&
                    this.Adoptees.SequenceEqual(input.Adoptees)
                ) && 
                (
                    this.Adoptor == input.Adoptor ||
                    (this.Adoptor != null &&
                    this.Adoptor.Equals(input.Adoptor))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Adoptees != null)
                    hashCode = hashCode * 59 + this.Adoptees.GetHashCode();
                if (this.Adoptor != null)
                    hashCode = hashCode * 59 + this.Adoptor.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }
    }
}
