/* 
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Kennel
    /// </summary>
    [DataContract]
        public partial class Kennel :  IEquatable<Kennel>
    {
        /// <summary>
        /// Gets or Sets Species
        /// </summary>
        [DataMember(Name="species", EmitDefaultValue=false)]
        public Species? Species { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Kennel" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="roomId">roomId (required).</param>
        /// <param name="species">species.</param>
        /// <param name="maxOccupancy">maxOccupancy (required).</param>
        /// <param name="lengthInInches">lengthInInches.</param>
        /// <param name="widthInInches">widthInInches.</param>
        /// <param name="heightInInches">heightInInches.</param>
        /// <param name="animals">animals.</param>
        /// <param name="notes">notes.</param>
        public Kennel(Id id = default(Id), string name = default(string), Guid? roomId = default(Guid?), Species? species = default(Species?), int? maxOccupancy = default(int?), int? lengthInInches = default(int?), int? widthInInches = default(int?), int? heightInInches = default(int?), List<BaseAnimalInfo> animals = default(List<BaseAnimalInfo>), List<Note> notes = default(List<Note>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Kennel and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "roomId" is required (not null)
            if (roomId == null)
            {
                throw new InvalidDataException("roomId is a required property for Kennel and cannot be null");
            }
            else
            {
                this.RoomId = roomId;
            }
            // to ensure "maxOccupancy" is required (not null)
            if (maxOccupancy == null)
            {
                throw new InvalidDataException("maxOccupancy is a required property for Kennel and cannot be null");
            }
            else
            {
                this.MaxOccupancy = maxOccupancy;
            }
            this.Name = name;
            this.Species = species;
            this.LengthInInches = lengthInInches;
            this.WidthInInches = widthInInches;
            this.HeightInInches = heightInInches;
            this.Animals = animals;
            this.Notes = notes;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Id Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RoomId
        /// </summary>
        [DataMember(Name="roomId", EmitDefaultValue=false)]
        public Guid? RoomId { get; set; }


        /// <summary>
        /// Gets or Sets MaxOccupancy
        /// </summary>
        [DataMember(Name="maxOccupancy", EmitDefaultValue=false)]
        public int? MaxOccupancy { get; set; }

        /// <summary>
        /// Gets or Sets LengthInInches
        /// </summary>
        [DataMember(Name="lengthInInches", EmitDefaultValue=false)]
        public int? LengthInInches { get; set; }

        /// <summary>
        /// Gets or Sets WidthInInches
        /// </summary>
        [DataMember(Name="widthInInches", EmitDefaultValue=false)]
        public int? WidthInInches { get; set; }

        /// <summary>
        /// Gets or Sets HeightInInches
        /// </summary>
        [DataMember(Name="heightInInches", EmitDefaultValue=false)]
        public int? HeightInInches { get; set; }

        /// <summary>
        /// Gets or Sets Animals
        /// </summary>
        [DataMember(Name="animals", EmitDefaultValue=false)]
        public List<BaseAnimalInfo> Animals { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<Note> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Kennel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  Species: ").Append(Species).Append("\n");
            sb.Append("  MaxOccupancy: ").Append(MaxOccupancy).Append("\n");
            sb.Append("  LengthInInches: ").Append(LengthInInches).Append("\n");
            sb.Append("  WidthInInches: ").Append(WidthInInches).Append("\n");
            sb.Append("  HeightInInches: ").Append(HeightInInches).Append("\n");
            sb.Append("  Animals: ").Append(Animals).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Kennel);
        }

        /// <summary>
        /// Returns true if Kennel instances are equal
        /// </summary>
        /// <param name="input">Instance of Kennel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Kennel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RoomId == input.RoomId ||
                    (this.RoomId != null &&
                    this.RoomId.Equals(input.RoomId))
                ) && 
                (
                    this.Species == input.Species ||
                    (this.Species != null &&
                    this.Species.Equals(input.Species))
                ) && 
                (
                    this.MaxOccupancy == input.MaxOccupancy ||
                    (this.MaxOccupancy != null &&
                    this.MaxOccupancy.Equals(input.MaxOccupancy))
                ) && 
                (
                    this.LengthInInches == input.LengthInInches ||
                    (this.LengthInInches != null &&
                    this.LengthInInches.Equals(input.LengthInInches))
                ) && 
                (
                    this.WidthInInches == input.WidthInInches ||
                    (this.WidthInInches != null &&
                    this.WidthInInches.Equals(input.WidthInInches))
                ) && 
                (
                    this.HeightInInches == input.HeightInInches ||
                    (this.HeightInInches != null &&
                    this.HeightInInches.Equals(input.HeightInInches))
                ) && 
                (
                    this.Animals == input.Animals ||
                    this.Animals != null &&
                    input.Animals != null &&
                    this.Animals.SequenceEqual(input.Animals)
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RoomId != null)
                    hashCode = hashCode * 59 + this.RoomId.GetHashCode();
                if (this.Species != null)
                    hashCode = hashCode * 59 + this.Species.GetHashCode();
                if (this.MaxOccupancy != null)
                    hashCode = hashCode * 59 + this.MaxOccupancy.GetHashCode();
                if (this.LengthInInches != null)
                    hashCode = hashCode * 59 + this.LengthInInches.GetHashCode();
                if (this.WidthInInches != null)
                    hashCode = hashCode * 59 + this.WidthInInches.GetHashCode();
                if (this.HeightInInches != null)
                    hashCode = hashCode * 59 + this.HeightInInches.GetHashCode();
                if (this.Animals != null)
                    hashCode = hashCode * 59 + this.Animals.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }
    }
}
