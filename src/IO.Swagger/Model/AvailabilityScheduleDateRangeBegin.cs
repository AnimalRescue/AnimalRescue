/* 
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AvailabilityScheduleDateRangeBegin
    /// </summary>
    [DataContract]
        public partial class AvailabilityScheduleDateRangeBegin :  IEquatable<AvailabilityScheduleDateRangeBegin>
    {
        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public MonthSelect? Month { get; set; }
        /// <summary>
        /// Gets or Sets DayOfMonth
        /// </summary>
        [DataMember(Name="dayOfMonth", EmitDefaultValue=false)]
        public DayOfMonthSelect? DayOfMonth { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailabilityScheduleDateRangeBegin" /> class.
        /// </summary>
        /// <param name="month">month.</param>
        /// <param name="dayOfMonth">dayOfMonth.</param>
        public AvailabilityScheduleDateRangeBegin(MonthSelect? month = default(MonthSelect?), DayOfMonthSelect? dayOfMonth = default(DayOfMonthSelect?))
        {
            this.Month = month;
            this.DayOfMonth = dayOfMonth;
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailabilityScheduleDateRangeBegin {\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  DayOfMonth: ").Append(DayOfMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailabilityScheduleDateRangeBegin);
        }

        /// <summary>
        /// Returns true if AvailabilityScheduleDateRangeBegin instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailabilityScheduleDateRangeBegin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailabilityScheduleDateRangeBegin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Month == input.Month ||
                    (this.Month != null &&
                    this.Month.Equals(input.Month))
                ) && 
                (
                    this.DayOfMonth == input.DayOfMonth ||
                    (this.DayOfMonth != null &&
                    this.DayOfMonth.Equals(input.DayOfMonth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Month != null)
                    hashCode = hashCode * 59 + this.Month.GetHashCode();
                if (this.DayOfMonth != null)
                    hashCode = hashCode * 59 + this.DayOfMonth.GetHashCode();
                return hashCode;
            }
        }
    }
}
