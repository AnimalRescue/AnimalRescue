/* 
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DateRange
    /// </summary>
    [DataContract]
        public partial class DateRange :  IEquatable<DateRange>
    {
        /// <summary>
        /// Gets or Sets StartYear
        /// </summary>
        [DataMember(Name="startYear", EmitDefaultValue=false)]
        public YearSelect? StartYear { get; set; }
        /// <summary>
        /// Gets or Sets StartMonth
        /// </summary>
        [DataMember(Name="startMonth", EmitDefaultValue=false)]
        public MonthSelect? StartMonth { get; set; }
        /// <summary>
        /// Gets or Sets StartDayOfMonth
        /// </summary>
        [DataMember(Name="startDayOfMonth", EmitDefaultValue=false)]
        public DayOfMonthSelect? StartDayOfMonth { get; set; }
        /// <summary>
        /// Gets or Sets EndYear
        /// </summary>
        [DataMember(Name="endYear", EmitDefaultValue=false)]
        public YearSelect? EndYear { get; set; }
        /// <summary>
        /// Gets or Sets EndMonth
        /// </summary>
        [DataMember(Name="endMonth", EmitDefaultValue=false)]
        public MonthSelect? EndMonth { get; set; }
        /// <summary>
        /// Gets or Sets EndDayOfMonth
        /// </summary>
        [DataMember(Name="endDayOfMonth", EmitDefaultValue=false)]
        public DayOfMonthSelect? EndDayOfMonth { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateRange" /> class.
        /// </summary>
        /// <param name="startYear">startYear.</param>
        /// <param name="startMonth">startMonth.</param>
        /// <param name="startDayOfMonth">startDayOfMonth.</param>
        /// <param name="endYear">endYear.</param>
        /// <param name="endMonth">endMonth.</param>
        /// <param name="endDayOfMonth">endDayOfMonth.</param>
        public DateRange(YearSelect? startYear = default(YearSelect?), MonthSelect? startMonth = default(MonthSelect?), DayOfMonthSelect? startDayOfMonth = default(DayOfMonthSelect?), YearSelect? endYear = default(YearSelect?), MonthSelect? endMonth = default(MonthSelect?), DayOfMonthSelect? endDayOfMonth = default(DayOfMonthSelect?))
        {
            this.StartYear = startYear;
            this.StartMonth = startMonth;
            this.StartDayOfMonth = startDayOfMonth;
            this.EndYear = endYear;
            this.EndMonth = endMonth;
            this.EndDayOfMonth = endDayOfMonth;
        }
        






        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateRange {\n");
            sb.Append("  StartYear: ").Append(StartYear).Append("\n");
            sb.Append("  StartMonth: ").Append(StartMonth).Append("\n");
            sb.Append("  StartDayOfMonth: ").Append(StartDayOfMonth).Append("\n");
            sb.Append("  EndYear: ").Append(EndYear).Append("\n");
            sb.Append("  EndMonth: ").Append(EndMonth).Append("\n");
            sb.Append("  EndDayOfMonth: ").Append(EndDayOfMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateRange);
        }

        /// <summary>
        /// Returns true if DateRange instances are equal
        /// </summary>
        /// <param name="input">Instance of DateRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateRange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartYear == input.StartYear ||
                    (this.StartYear != null &&
                    this.StartYear.Equals(input.StartYear))
                ) && 
                (
                    this.StartMonth == input.StartMonth ||
                    (this.StartMonth != null &&
                    this.StartMonth.Equals(input.StartMonth))
                ) && 
                (
                    this.StartDayOfMonth == input.StartDayOfMonth ||
                    (this.StartDayOfMonth != null &&
                    this.StartDayOfMonth.Equals(input.StartDayOfMonth))
                ) && 
                (
                    this.EndYear == input.EndYear ||
                    (this.EndYear != null &&
                    this.EndYear.Equals(input.EndYear))
                ) && 
                (
                    this.EndMonth == input.EndMonth ||
                    (this.EndMonth != null &&
                    this.EndMonth.Equals(input.EndMonth))
                ) && 
                (
                    this.EndDayOfMonth == input.EndDayOfMonth ||
                    (this.EndDayOfMonth != null &&
                    this.EndDayOfMonth.Equals(input.EndDayOfMonth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartYear != null)
                    hashCode = hashCode * 59 + this.StartYear.GetHashCode();
                if (this.StartMonth != null)
                    hashCode = hashCode * 59 + this.StartMonth.GetHashCode();
                if (this.StartDayOfMonth != null)
                    hashCode = hashCode * 59 + this.StartDayOfMonth.GetHashCode();
                if (this.EndYear != null)
                    hashCode = hashCode * 59 + this.EndYear.GetHashCode();
                if (this.EndMonth != null)
                    hashCode = hashCode * 59 + this.EndMonth.GetHashCode();
                if (this.EndDayOfMonth != null)
                    hashCode = hashCode * 59 + this.EndDayOfMonth.GetHashCode();
                return hashCode;
            }
        }
    }
}
