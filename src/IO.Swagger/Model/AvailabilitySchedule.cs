/* 
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AvailabilitySchedule
    /// </summary>
    [DataContract]
        public partial class AvailabilitySchedule :  IEquatable<AvailabilitySchedule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailabilitySchedule" /> class.
        /// </summary>
        /// <param name="dateRange">dateRange.</param>
        /// <param name="schedule">schedule.</param>
        public AvailabilitySchedule(AvailabilityScheduleDateRange dateRange = default(AvailabilityScheduleDateRange), List<AvailabilityBlock> schedule = default(List<AvailabilityBlock>))
        {
            this.DateRange = dateRange;
            this.Schedule = schedule;
        }
        
        /// <summary>
        /// Gets or Sets DateRange
        /// </summary>
        [DataMember(Name="dateRange", EmitDefaultValue=false)]
        public AvailabilityScheduleDateRange DateRange { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name="schedule", EmitDefaultValue=false)]
        public List<AvailabilityBlock> Schedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailabilitySchedule {\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailabilitySchedule);
        }

        /// <summary>
        /// Returns true if AvailabilitySchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailabilitySchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailabilitySchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateRange == input.DateRange ||
                    (this.DateRange != null &&
                    this.DateRange.Equals(input.DateRange))
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    this.Schedule != null &&
                    input.Schedule != null &&
                    this.Schedule.SequenceEqual(input.Schedule)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateRange != null)
                    hashCode = hashCode * 59 + this.DateRange.GetHashCode();
                if (this.Schedule != null)
                    hashCode = hashCode * 59 + this.Schedule.GetHashCode();
                return hashCode;
            }
        }
    }
}
