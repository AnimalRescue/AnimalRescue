/* 
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TimeInterval
    /// </summary>
    [DataContract]
        public partial class TimeInterval :  IEquatable<TimeInterval>
    {
        /// <summary>
        /// Gets or Sets FromTime
        /// </summary>
        [DataMember(Name="fromTime", EmitDefaultValue=false)]
        public HalfHourMilitaryTimeSelect? FromTime { get; set; }
        /// <summary>
        /// Gets or Sets ToTime
        /// </summary>
        [DataMember(Name="toTime", EmitDefaultValue=false)]
        public HalfHourMilitaryTimeSelect? ToTime { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeInterval" /> class.
        /// </summary>
        /// <param name="fromTime">fromTime.</param>
        /// <param name="toTime">toTime.</param>
        public TimeInterval(HalfHourMilitaryTimeSelect? fromTime = default(HalfHourMilitaryTimeSelect?), HalfHourMilitaryTimeSelect? toTime = default(HalfHourMilitaryTimeSelect?))
        {
            this.FromTime = fromTime;
            this.ToTime = toTime;
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeInterval {\n");
            sb.Append("  FromTime: ").Append(FromTime).Append("\n");
            sb.Append("  ToTime: ").Append(ToTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeInterval);
        }

        /// <summary>
        /// Returns true if TimeInterval instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeInterval input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FromTime == input.FromTime ||
                    (this.FromTime != null &&
                    this.FromTime.Equals(input.FromTime))
                ) && 
                (
                    this.ToTime == input.ToTime ||
                    (this.ToTime != null &&
                    this.ToTime.Equals(input.ToTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromTime != null)
                    hashCode = hashCode * 59 + this.FromTime.GetHashCode();
                if (this.ToTime != null)
                    hashCode = hashCode * 59 + this.ToTime.GetHashCode();
                return hashCode;
            }
        }
    }
}
