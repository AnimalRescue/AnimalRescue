/* 
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Enclosure
    /// </summary>
    [DataContract]
        public partial class Enclosure :  IEquatable<Enclosure>
    {
        /// <summary>
        /// Defines UnitOfAreaMeasure
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnitOfAreaMeasureEnum
        {
            /// <summary>
            /// Enum Sqfeet for value: sq. feet
            /// </summary>
            [EnumMember(Value = "sq. feet")]
            Sqfeet = 0,
            /// <summary>
            /// Enum Acres for value: acres
            /// </summary>
            [EnumMember(Value = "acres")]
            Acres = 1        }
        /// <summary>
        /// Gets or Sets UnitOfAreaMeasure
        /// </summary>
        [DataMember(Name="unitOfAreaMeasure", EmitDefaultValue=false)]
        public UnitOfAreaMeasureEnum? UnitOfAreaMeasure { get; set; }
        /// <summary>
        /// Defines UnitOfHeightMeasure
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnitOfHeightMeasureEnum
        {
            /// <summary>
            /// Enum Inches for value: inches
            /// </summary>
            [EnumMember(Value = "inches")]
            Inches = 0,
            /// <summary>
            /// Enum Feet for value: feet
            /// </summary>
            [EnumMember(Value = "feet")]
            Feet = 1        }
        /// <summary>
        /// Gets or Sets UnitOfHeightMeasure
        /// </summary>
        [DataMember(Name="unitOfHeightMeasure", EmitDefaultValue=false)]
        public UnitOfHeightMeasureEnum? UnitOfHeightMeasure { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Enclosure" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="size">size.</param>
        /// <param name="unitOfAreaMeasure">unitOfAreaMeasure.</param>
        /// <param name="heightInFeet">heightInFeet.</param>
        /// <param name="unitOfHeightMeasure">unitOfHeightMeasure.</param>
        /// <param name="notes">notes.</param>
        public Enclosure(Id id = default(Id), string name = default(string), decimal? size = default(decimal?), UnitOfAreaMeasureEnum? unitOfAreaMeasure = default(UnitOfAreaMeasureEnum?), decimal? heightInFeet = default(decimal?), UnitOfHeightMeasureEnum? unitOfHeightMeasure = default(UnitOfHeightMeasureEnum?), List<Note> notes = default(List<Note>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Enclosure and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.Name = name;
            this.Size = size;
            this.UnitOfAreaMeasure = unitOfAreaMeasure;
            this.HeightInFeet = heightInFeet;
            this.UnitOfHeightMeasure = unitOfHeightMeasure;
            this.Notes = notes;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Id Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public decimal? Size { get; set; }


        /// <summary>
        /// Gets or Sets HeightInFeet
        /// </summary>
        [DataMember(Name="heightInFeet", EmitDefaultValue=false)]
        public decimal? HeightInFeet { get; set; }


        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<Note> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Enclosure {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  UnitOfAreaMeasure: ").Append(UnitOfAreaMeasure).Append("\n");
            sb.Append("  HeightInFeet: ").Append(HeightInFeet).Append("\n");
            sb.Append("  UnitOfHeightMeasure: ").Append(UnitOfHeightMeasure).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Enclosure);
        }

        /// <summary>
        /// Returns true if Enclosure instances are equal
        /// </summary>
        /// <param name="input">Instance of Enclosure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Enclosure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.UnitOfAreaMeasure == input.UnitOfAreaMeasure ||
                    (this.UnitOfAreaMeasure != null &&
                    this.UnitOfAreaMeasure.Equals(input.UnitOfAreaMeasure))
                ) && 
                (
                    this.HeightInFeet == input.HeightInFeet ||
                    (this.HeightInFeet != null &&
                    this.HeightInFeet.Equals(input.HeightInFeet))
                ) && 
                (
                    this.UnitOfHeightMeasure == input.UnitOfHeightMeasure ||
                    (this.UnitOfHeightMeasure != null &&
                    this.UnitOfHeightMeasure.Equals(input.UnitOfHeightMeasure))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.UnitOfAreaMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfAreaMeasure.GetHashCode();
                if (this.HeightInFeet != null)
                    hashCode = hashCode * 59 + this.HeightInFeet.GetHashCode();
                if (this.UnitOfHeightMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfHeightMeasure.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }
    }
}
