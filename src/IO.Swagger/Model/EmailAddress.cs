/* 
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EmailAddress
    /// </summary>
    [DataContract]
        public partial class EmailAddress :  IEquatable<EmailAddress>
    {
        /// <summary>
        /// Defines EmailType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EmailTypeEnum
        {
            /// <summary>
            /// Enum Primary for value: Primary
            /// </summary>
            [EnumMember(Value = "Primary")]
            Primary = 0,
            /// <summary>
            /// Enum Secondary for value: Secondary
            /// </summary>
            [EnumMember(Value = "Secondary")]
            Secondary = 1        }
        /// <summary>
        /// Gets or Sets EmailType
        /// </summary>
        [DataMember(Name="emailType", EmitDefaultValue=false)]
        public EmailTypeEnum EmailType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAddress" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="emailType">emailType (required).</param>
        /// <param name="notes">notes.</param>
        public EmailAddress(string email = default(string), EmailTypeEnum emailType = default(EmailTypeEnum), List<Note> notes = default(List<Note>))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for EmailAddress and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "emailType" is required (not null)
            if (emailType == null)
            {
                throw new InvalidDataException("emailType is a required property for EmailAddress and cannot be null");
            }
            else
            {
                this.EmailType = emailType;
            }
            this.Notes = notes;
        }
        
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }


        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<Note> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailAddress {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailType: ").Append(EmailType).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailAddress);
        }

        /// <summary>
        /// Returns true if EmailAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailType == input.EmailType ||
                    (this.EmailType != null &&
                    this.EmailType.Equals(input.EmailType))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.EmailType != null)
                    hashCode = hashCode * 59 + this.EmailType.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }
    }
}
