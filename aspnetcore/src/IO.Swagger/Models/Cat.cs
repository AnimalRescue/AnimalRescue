/*
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Cat : IEquatable<Cat>
    { 
        /// <summary>
        /// Gets or Sets BaseInfo
        /// </summary>
        [Required]
        [DataMember(Name="baseInfo")]
        public BaseAnimalInfo BaseInfo { get; set; }

        /// <summary>
        /// Gets or Sets Breed
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CatBreeds
        {
            /// <summary>
            /// Enum UndeterminedEnum for Undetermined
            /// </summary>
            [EnumMember(Value = "Undetermined")]
            UndeterminedEnum = 0,
            /// <summary>
            /// Enum AbyssinianEnum for Abyssinian
            /// </summary>
            [EnumMember(Value = "Abyssinian")]
            AbyssinianEnum = 1,
            /// <summary>
            /// Enum AmericanCurlEnum for American Curl
            /// </summary>
            [EnumMember(Value = "American Curl")]
            AmericanCurlEnum = 2,
            /// <summary>
            /// Enum BengalEnum for Bengal
            /// </summary>
            [EnumMember(Value = "Bengal")]
            BengalEnum = 3,
            /// <summary>
            /// Enum DomesticLonghairEnum for Domestic Longhair
            /// </summary>
            [EnumMember(Value = "Domestic Longhair")]
            DomesticLonghairEnum = 4,
            /// <summary>
            /// Enum DomesticMediumhairEnum for Domestic Mediumhair
            /// </summary>
            [EnumMember(Value = "Domestic Mediumhair")]
            DomesticMediumhairEnum = 5,
            /// <summary>
            /// Enum DomesticShorthairEnum for Domestic Shorthair
            /// </summary>
            [EnumMember(Value = "Domestic Shorthair")]
            DomesticShorthairEnum = 6,
            /// <summary>
            /// Enum HimalayanEnum for Himalayan
            /// </summary>
            [EnumMember(Value = "Himalayan")]
            HimalayanEnum = 7,
            /// <summary>
            /// Enum MaineCoonEnum for Maine Coon
            /// </summary>
            [EnumMember(Value = "Maine Coon")]
            MaineCoonEnum = 8,
            /// <summary>
            /// Enum ManxEnum for Manx
            /// </summary>
            [EnumMember(Value = "Manx")]
            ManxEnum = 9,
            /// <summary>
            /// Enum PersianEnum for Persian
            /// </summary>
            [EnumMember(Value = "Persian")]
            PersianEnum = 10,
            /// <summary>
            /// Enum RagaMuffinEnum for RagaMuffin
            /// </summary>
            [EnumMember(Value = "RagaMuffin")]
            RagaMuffinEnum = 11,
            /// <summary>
            /// Enum RagdollEnum for Ragdoll
            /// </summary>
            [EnumMember(Value = "Ragdoll")]
            RagdollEnum = 12,
            /// <summary>
            /// Enum RussianBlueEnum for Russian Blue
            /// </summary>
            [EnumMember(Value = "Russian Blue")]
            RussianBlueEnum = 13,
            /// <summary>
            /// Enum FoldEnum for Fold
            /// </summary>
            [EnumMember(Value = "Fold")]
            FoldEnum = 14,
            /// <summary>
            /// Enum SiameseEnum for Siamese
            /// </summary>
            [EnumMember(Value = "Siamese")]
            SiameseEnum = 15,
            /// <summary>
            /// Enum SnowshoeEnum for Snowshoe
            /// </summary>
            [EnumMember(Value = "Snowshoe")]
            SnowshoeEnum = 16,
            /// <summary>
            /// Enum SphynxEnum for Sphynx
            /// </summary>
            [EnumMember(Value = "Sphynx")]
            SphynxEnum = 17        }

        /// <summary>
        /// Gets or Sets Breed
        /// </summary>
        [Required]
        [DataMember(Name="breed")]
        public CatBreeds? Breed { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CatColors
        {
            /// <summary>
            /// Enum WhiteEnum for White
            /// </summary>
            [EnumMember(Value = "White")]
            WhiteEnum = 0,
            /// <summary>
            /// Enum BlackEnum for Black
            /// </summary>
            [EnumMember(Value = "Black")]
            BlackEnum = 1,
            /// <summary>
            /// Enum BlackAndWhiteEnum for Black and White
            /// </summary>
            [EnumMember(Value = "Black and White")]
            BlackAndWhiteEnum = 2,
            /// <summary>
            /// Enum OrangeTabbyEnum for Orange Tabby
            /// </summary>
            [EnumMember(Value = "Orange Tabby")]
            OrangeTabbyEnum = 3,
            /// <summary>
            /// Enum OrangeAndWhiteEnum for Orange and White
            /// </summary>
            [EnumMember(Value = "Orange and White")]
            OrangeAndWhiteEnum = 4,
            /// <summary>
            /// Enum BrownEnum for Brown
            /// </summary>
            [EnumMember(Value = "Brown")]
            BrownEnum = 5,
            /// <summary>
            /// Enum BrownTabbyEnum for Brown Tabby
            /// </summary>
            [EnumMember(Value = "Brown Tabby")]
            BrownTabbyEnum = 6,
            /// <summary>
            /// Enum BrownAndWhiteEnum for Brown and White
            /// </summary>
            [EnumMember(Value = "Brown and White")]
            BrownAndWhiteEnum = 7,
            /// <summary>
            /// Enum GrayEnum for Gray
            /// </summary>
            [EnumMember(Value = "Gray")]
            GrayEnum = 8,
            /// <summary>
            /// Enum GrayAndWhiteEnum for Gray and White
            /// </summary>
            [EnumMember(Value = "Gray and White")]
            GrayAndWhiteEnum = 9,
            /// <summary>
            /// Enum GrayTabbyEnum for Gray Tabby
            /// </summary>
            [EnumMember(Value = "Gray Tabby")]
            GrayTabbyEnum = 10,
            /// <summary>
            /// Enum SilverEnum for Silver
            /// </summary>
            [EnumMember(Value = "Silver")]
            SilverEnum = 11,
            /// <summary>
            /// Enum SilverAndWhiteEnum for Silver and White
            /// </summary>
            [EnumMember(Value = "Silver and White")]
            SilverAndWhiteEnum = 12,
            /// <summary>
            /// Enum SilverTabbyEnum for Silver Tabby
            /// </summary>
            [EnumMember(Value = "Silver Tabby")]
            SilverTabbyEnum = 13,
            /// <summary>
            /// Enum BuffEnum for Buff
            /// </summary>
            [EnumMember(Value = "Buff")]
            BuffEnum = 14,
            /// <summary>
            /// Enum BuffAndWhiteEnum for Buff and White
            /// </summary>
            [EnumMember(Value = "Buff and White")]
            BuffAndWhiteEnum = 15,
            /// <summary>
            /// Enum BuffTabbyEnum for Buff Tabby
            /// </summary>
            [EnumMember(Value = "Buff Tabby")]
            BuffTabbyEnum = 16,
            /// <summary>
            /// Enum SealPointEnum for Seal Point
            /// </summary>
            [EnumMember(Value = "Seal Point")]
            SealPointEnum = 17,
            /// <summary>
            /// Enum FlamePointEnum for Flame Point
            /// </summary>
            [EnumMember(Value = "Flame Point")]
            FlamePointEnum = 18,
            /// <summary>
            /// Enum LavendarLilacPointEnum for Lavendar/Lilac Point
            /// </summary>
            [EnumMember(Value = "Lavendar/Lilac Point")]
            LavendarLilacPointEnum = 19,
            /// <summary>
            /// Enum SnowshoeEnum for Snowshoe
            /// </summary>
            [EnumMember(Value = "Snowshoe")]
            SnowshoeEnum = 20,
            /// <summary>
            /// Enum CalicoEnum for Calico
            /// </summary>
            [EnumMember(Value = "Calico")]
            CalicoEnum = 21,
            /// <summary>
            /// Enum TortieEnum for Tortie
            /// </summary>
            [EnumMember(Value = "Tortie")]
            TortieEnum = 22,
            /// <summary>
            /// Enum DiluteCalicoEnum for Dilute Calico
            /// </summary>
            [EnumMember(Value = "Dilute Calico")]
            DiluteCalicoEnum = 23        }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [Required]
        [DataMember(Name="color")]
        public CatColors? Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cat {\n");
            sb.Append("  BaseInfo: ").Append(BaseInfo).Append("\n");
            sb.Append("  Breed: ").Append(Breed).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Cat)obj);
        }

        /// <summary>
        /// Returns true if Cat instances are equal
        /// </summary>
        /// <param name="other">Instance of Cat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cat other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BaseInfo == other.BaseInfo ||
                    BaseInfo != null &&
                    BaseInfo.Equals(other.BaseInfo)
                ) && 
                (
                    Breed == other.Breed ||
                    Breed != null &&
                    Breed.Equals(other.Breed)
                ) && 
                (
                    Color == other.Color ||
                    Color != null &&
                    Color.Equals(other.Color)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BaseInfo != null)
                    hashCode = hashCode * 59 + BaseInfo.GetHashCode();
                    if (Breed != null)
                    hashCode = hashCode * 59 + Breed.GetHashCode();
                    if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Cat left, Cat right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Cat left, Cat right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
