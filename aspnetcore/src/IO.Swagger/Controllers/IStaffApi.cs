/*
 * AnimalRescue API
 *
 * API for OSS AnimalRescue
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: jlgartee@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public interface IStaffApiController
    { 
        /// <summary>
        /// adds a Building at the specified Location
        /// </summary>
        /// <remarks>Adds a new Building to the specified Location</remarks>
        /// <param name="body">unique id of Building to update</param>
        /// <param name="locationId"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult AddBuildingToLocation([FromBody]Building body, [FromRoute][Required]Guid? locationId);

        /// <summary>
        /// adds an inventory item
        /// </summary>
        /// <remarks>Adds an item to the system</remarks>
        /// <param name="body">Inventory item to add</param>
        /// <response code="201">item created</response>
        /// <response code="400">invalid input, object invalid</response>
        /// <response code="401">unauthorized request for this user</response>
        /// <response code="409">an existing item already exists</response>
        IActionResult AddInventory([FromBody]InventoryItem body);

        /// <summary>
        /// adds a Kennel to the rescue
        /// </summary>
        /// <remarks>Adds a new Kennel to the Rescue</remarks>
        /// <param name="body">Kennel to add to the Rescue</param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult AddKennel([FromBody]Kennel body);

        /// <summary>
        /// creates a Kennel in the specified Room
        /// </summary>
        /// <remarks>Adds a new Kennel to the specified Room</remarks>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult AddKennelToRoom([FromBody]Kennel body, [FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromRoute][Required]Guid? roomId);

        /// <summary>
        /// creates a Room in the specified Building
        /// </summary>
        /// <remarks>Adds a new Room to the specified Location</remarks>
        /// <param name="body">Room to create</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult AddRoomToBuilding([FromBody]Room body, [FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId);

        /// <summary>
        /// creates a new Cat
        /// </summary>
        /// <remarks>adds a Cat with a unique id</remarks>
        /// <param name="body">full Cat object with new id</param>
        /// <response code="200">ok</response>
        /// <response code="201">create successful</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request for this user</response>
        /// <response code="409">unable to apply valid change to a valid Cat</response>
        IActionResult CreateCat([FromBody]Cat body);

        /// <summary>
        /// creates a new Contact
        /// </summary>
        /// <remarks>adds a Contact with a unique id</remarks>
        /// <param name="body">full Contact object with new id</param>
        /// <response code="200">ok</response>
        /// <response code="201">create successful</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request for this user</response>
        /// <response code="409">unable to apply valid change to a valid Contact</response>
        IActionResult CreateContact([FromBody]Contact body);

        /// <summary>
        /// creates a new Dog
        /// </summary>
        /// <remarks>adds a Dog with a unique id</remarks>
        /// <param name="body">full Dog object with new id</param>
        /// <response code="200">ok</response>
        /// <response code="201">create successful</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request for this user</response>
        /// <response code="409">unable to apply valid change to a valid Dog</response>
        IActionResult CreateDog([FromBody]Dog body);

        /// <summary>
        /// creates new Donor with a unique id
        /// </summary>
        /// <remarks>creates a new, unique Donor</remarks>
        /// <param name="body">new Donor object</param>
        /// <response code="200">ok</response>
        /// <response code="400">invalid content on Donor info</response>
        /// <response code="401">unauthorized request</response>
        IActionResult CreateDonor([FromBody]Donor body);

        /// <summary>
        /// creates new Foster with a unique id
        /// </summary>
        /// <remarks>creates a new, unique Foster</remarks>
        /// <param name="body">new Foster object</param>
        /// <response code="200">ok</response>
        /// <response code="400">invalid content on Foster info</response>
        /// <response code="401">unauthorized request</response>
        IActionResult CreateFoster([FromBody]Foster body);

        /// <summary>
        /// creates a new Organization
        /// </summary>
        /// <remarks>adds a Organization with a unique id</remarks>
        /// <param name="body">full Organization object with new id</param>
        /// <response code="200">ok</response>
        /// <response code="201">create successful</response>
        /// <response code="400">bad request</response>
        /// <response code="409">unable to apply valid change to a valid Organization</response>
        IActionResult CreateOrganization([FromBody]Organization body);

        /// <summary>
        /// creates new Volunteer with a unique id
        /// </summary>
        /// <remarks>creates a new, unique Volunteer</remarks>
        /// <param name="body">new Volunteer object</param>
        /// <response code="200">ok</response>
        /// <response code="400">invalid content on Volunteer info</response>
        /// <response code="401">unauthorized request</response>
        IActionResult CreateVolunteer([FromBody]Volunteer body);

        /// <summary>
        /// deletes a Building from a Location by id
        /// </summary>
        /// <remarks>Deletes an existing Building at a Location by id</remarks>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteBuildingAtLocationById([FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId);

        /// <summary>
        /// deletes a Cat by id
        /// </summary>
        /// <remarks>Deletes an existing Cat by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteCatById([FromRoute][Required]Guid? id);

        /// <summary>
        /// deletes a Contact by id
        /// </summary>
        /// <remarks>Deletes an existing Contact by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteContactById([FromRoute][Required]Guid? id);

        /// <summary>
        /// deletes a Dog by id
        /// </summary>
        /// <remarks>Deletes an existing Dog by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteDogById([FromRoute][Required]Guid? id);

        /// <summary>
        /// deletes a Donor by id
        /// </summary>
        /// <remarks>Deletes an existing Donor by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteDonorById([FromRoute][Required]Guid? id);

        /// <summary>
        /// deletes a Foster by id
        /// </summary>
        /// <remarks>Deletes an existing Foster by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteFosterById([FromRoute][Required]Guid? id);

        /// <summary>
        /// deletes a Kennel by id
        /// </summary>
        /// <remarks>Deletes an existing Kennel by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteKennelById([FromRoute][Required]Guid? id);

        /// <summary>
        /// deletes a Kennel by id
        /// </summary>
        /// <remarks>Deletes an existing Kennel from a Room by id</remarks>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteKennelFromRoomById([FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromRoute][Required]Guid? roomId, [FromRoute][Required]Guid? kennelId);

        /// <summary>
        /// deletes a Organization by id
        /// </summary>
        /// <remarks>Deletes an existing Organization by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteOrganizationById([FromRoute][Required]Guid? id);

        /// <summary>
        /// deletes a Room by id
        /// </summary>
        /// <remarks>Deletes an existing Building at a Room by id</remarks>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteRoomFromBuildingById([FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromRoute][Required]Guid? roomId);

        /// <summary>
        /// deletes a Volunteer by id
        /// </summary>
        /// <remarks>Deletes an existing Volunteer by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult DeleteVolunteerById([FromRoute][Required]Guid? id);

        /// <summary>
        /// reports whether the API is up and running
        /// </summary>
        /// <remarks>used to check on the api status, but returns no content</remarks>
        /// <response code="204">OK</response>
        IActionResult GetApiHealth();

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>Returns details about a specific Location </remarks>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetBuildingAtLocationById([FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// returns a specific Building for the Rescue
        /// </summary>
        /// <remarks>Returns details about a specific Building </remarks>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetBuildingById([FromRoute][Required]Guid? id, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// Returns a (filtered) collection of buildings affiliated withthe Rescue
        /// </summary>
        /// <remarks>With no parameters, returns all Buildings affiliated with the Rescue </remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="fromDate">Specifies the first date to return in a query</param>
        /// <param name="toDate">Specifies the last date to include in a query</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetBuildings([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate);

        /// <summary>
        /// returns all buildings at a Location
        /// </summary>
        /// <remarks>With no parameters, returns all Buildings at the specified Location </remarks>
        /// <param name="locationId"></param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetBuildingsAtLocation([FromRoute][Required]Guid? locationId, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// retrieves a Cat by id
        /// </summary>
        /// <remarks>Gets an existing Cat by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult GetCatById([FromRoute][Required]Guid? id);

        /// <summary>
        /// retrieves a Contact by id
        /// </summary>
        /// <remarks>Gets an existing Contact by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult GetContactById([FromRoute][Required]Guid? id);

        /// <summary>
        /// retrieves counties for the provided state
        /// </summary>
        /// <remarks>Given a state, return an alpha list of counties in that state</remarks>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">OK</response>
        IActionResult GetCountiesByState([FromQuery][Required()]string state, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// retrieves a Dog by id
        /// </summary>
        /// <remarks>Gets an existing Dog by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult GetDogById([FromRoute][Required]Guid? id);

        /// <summary>
        /// retrieves a Donor by id
        /// </summary>
        /// <remarks>Gets an existing Donor by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult GetDonorById([FromRoute][Required]Guid? id);

        /// <summary>
        /// searches animal rescue doners
        /// </summary>
        /// <remarks>With no parameters, returns all Donors. Allows filters. </remarks>
        /// <param name="state">state to retrieve counties for</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters</param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="fromDate">Specifies the first date to return in a query</param>
        /// <param name="toDate">Specifies the last date to include in a query</param>
        /// <response code="200">search results matching specified criteria</response>
        /// <response code="400">bad input parameter</response>
        IActionResult GetDonors([FromQuery][Required()]string state, [FromQuery]string searchString, [FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate);

        /// <summary>
        /// returns a specific Enclosure for the Rescue
        /// </summary>
        /// <remarks>Returns details about a specific Enclosure </remarks>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetEnclosureById([FromRoute][Required]Guid? id, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// searches all Enclosures for the Rescue
        /// </summary>
        /// <remarks>With no parameters, returns all Enclosures for the Rescue </remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetEnclosures([FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// retrieves a Foster by id
        /// </summary>
        /// <remarks>Gets an existing Foster by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult GetFosterById([FromRoute][Required]Guid? id);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>Returns details about a specific Kennel </remarks>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetKennelById([FromRoute][Required]Guid? id, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>Returns details about a specific Room </remarks>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetKennelFromRoomById([FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromRoute][Required]Guid? roomId, [FromRoute][Required]Guid? kennelId, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// searches all Kennels for the Rescue
        /// </summary>
        /// <remarks>With no parameters, returns all Kennels for the Rescue </remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetKennels([FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// returns all kennels in a Room
        /// </summary>
        /// <remarks>With no parameters, returns all kennels in a Room</remarks>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetKennelsInRoom([FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromRoute][Required]Guid? roomId, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>Returns details about a specific Location </remarks>
        /// <param name="id"></param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetLocationById([FromRoute][Required]Guid? id, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// searches all locations for the Rescue
        /// </summary>
        /// <remarks>With no parameters, returns all Locations for the Rescue </remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetLocations([FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// retrieves a Organization by id
        /// </summary>
        /// <remarks>Gets an existing Organization by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult GetOrganizationById([FromRoute][Required]Guid? id);

        /// <summary>
        /// returns a specific location for the Rescue
        /// </summary>
        /// <remarks>Returns details about a specific Room </remarks>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetRoomInBuildingById([FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromRoute][Required]Guid? roomId, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// gets all Rooms in a Building at a Location
        /// </summary>
        /// <remarks>With no parameters, returns all Rooms in a Building</remarks>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult GetRoomsInBuilding([FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromQuery]int? limit, [FromQuery]int? offset);

        /// <summary>
        /// retrieves a Volunteer by id
        /// </summary>
        /// <remarks>Gets an existing Volunteer by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="400">bad request</response>
        /// <response code="401">unauthorized request</response>
        IActionResult GetVolunteerById([FromRoute][Required]Guid? id);

        /// <summary>
        /// support for animal intake process
        /// </summary>
        /// <remarks>Base endopoints returns and empty Intake array</remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="fromDate">Specifies the first date to return in a query</param>
        /// <param name="toDate">Specifies the last date to include in a query</param>
        /// <response code="200">OK</response>
        IActionResult IntakeInformation([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate);

        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>Updates an existing Location by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <response code="200">ok</response>
        IActionResult PatchBuildingAtLocationById([FromBody]Building body, [FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId);

        /// <summary>
        /// updates a Building by id
        /// </summary>
        /// <remarks>Updates an existing Building by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Building with fields to patch</param>
        /// <param name="id">unique id of Building to patch</param>
        /// <response code="200">ok</response>
        IActionResult PatchBuildingById([FromBody]Building body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Cat by id
        /// </summary>
        /// <remarks>Updates an existing Cat by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Cat with fields to patch</param>
        /// <param name="id">unique id of Cat to patch</param>
        /// <response code="200">ok</response>
        IActionResult PatchCatById([FromBody]Cat body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Contact by id
        /// </summary>
        /// <remarks>Updates an existing Contact by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Contact with fields to patch</param>
        /// <param name="id">unique id of Contact to patch</param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult PatchContactById([FromBody]Contact body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Dog by id
        /// </summary>
        /// <remarks>Updates an existing Dog by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Dog with fields to patch</param>
        /// <param name="id">unique id of Dog to patch</param>
        /// <response code="200">ok</response>
        IActionResult PatchDogById([FromBody]Dog body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Donor by id
        /// </summary>
        /// <remarks>Updates an existing Donor by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Donor with fields to patch</param>
        /// <param name="id">unique id of Donor to patch</param>
        /// <response code="200">ok</response>
        IActionResult PatchDonorById([FromBody]Donor body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Foster by id
        /// </summary>
        /// <remarks>Updates an existing Foster by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Foster with fields to patch</param>
        /// <param name="id">unique id of Foster to patch</param>
        /// <response code="200">ok</response>
        IActionResult PatchFosterById([FromBody]Foster body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>Updates an existing Kennel by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id">unique id of Kennel to patch</param>
        /// <response code="200">ok</response>
        IActionResult PatchKennelById([FromBody]Kennel body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>Updates an existing Kennel by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <response code="200">ok</response>
        IActionResult PatchKennelInRoomById([FromBody]Kennel body, [FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromRoute][Required]Guid? roomId, [FromRoute][Required]Guid? kennelId);

        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>Updates an existing Location by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Location with fields to patch</param>
        /// <param name="id">unique id of Location to patch</param>
        /// <response code="200">ok</response>
        IActionResult PatchLocationById([FromBody]Location body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Organization by id
        /// </summary>
        /// <remarks>Updates an existing Organization by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Organization with fields to patch</param>
        /// <param name="id">unique id of Organization to patch</param>
        /// <response code="200">ok</response>
        IActionResult PatchOrganizationById([FromBody]Organization body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Room by id
        /// </summary>
        /// <remarks>Updates an existing Room by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Room with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <response code="200">ok</response>
        IActionResult PatchRoomInBuildingById([FromBody]Room body, [FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromRoute][Required]Guid? roomId);

        /// <summary>
        /// updates a Volunteer by id
        /// </summary>
        /// <remarks>Updates an existing Volunteer by id with only elements that are changing</remarks>
        /// <param name="body">partial json object of Volunteer with fields to patch</param>
        /// <param name="id">unique id of Volunteer to patch</param>
        /// <response code="200">ok</response>
        IActionResult PatchVolunteerById([FromBody]Volunteer body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// searches all Adoptions at the Rescue
        /// </summary>
        /// <remarks>With no parameters, returns all Adoptions at the Rescue </remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="fromDate">Specifies the first date to return in a query</param>
        /// <param name="toDate">Specifies the last date to include in a query</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult SearchAdoptions([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate);

        /// <summary>
        /// searches cats
        /// </summary>
        /// <remarks>With no parameters, returns all cats currently in the shelter. Allows filters. </remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="fromDate">Specifies the first date to return in a query</param>
        /// <param name="toDate">Specifies the last date to include in a query</param>
        /// <param name="name">Specifies a matching pattern for the name</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values</param>
        /// <param name="breed">breed of cat to retrieve</param>
        /// <param name="color">Specifies one of the valid CatColors</param>
        /// <param name="gender">Specifies on of the valid Gender</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult SearchCats([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate, [FromQuery]DateTime? name, [FromQuery]string adoptionStatus, [FromQuery]string breed, [FromQuery]string color, [FromQuery]string gender);

        /// <summary>
        /// searches Contact
        /// </summary>
        /// <remarks>With no parameters, returns all contacts associated with the Rescue. Allows filters. </remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="fromDate">Specifies the first date to return in a query</param>
        /// <param name="toDate">Specifies the last date to include in a query</param>
        /// <param name="searchString">pass an optional search string for looking up Fosters</param>
        /// <param name="gender">One of the valid Gender enumeration values</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult SearchContact([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate, [FromQuery]string searchString, [FromQuery]Gender gender);

        /// <summary>
        /// searches dogs
        /// </summary>
        /// <remarks>With no parameters, returns all dogss currently in the shelter. Allows filters. </remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="fromDate">Specifies the first date to return in a query</param>
        /// <param name="toDate">Specifies the last date to include in a query</param>
        /// <param name="name">Specifies a matching pattern for the name</param>
        /// <param name="adoptionStatus">Specifies one of the valid AdoptionStatus values</param>
        /// <param name="breed">breed of dog to retrieve</param>
        /// <param name="color">Specifies one of the valid DogColors</param>
        /// <param name="gender">Specifies on of the valid Gender</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult SearchDog([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate, [FromQuery]DateTime? name, [FromQuery]string adoptionStatus, [FromQuery]string breed, [FromQuery]string color, [FromQuery]string gender);

        /// <summary>
        /// searches animal fosters
        /// </summary>
        /// <remarks>With no parameters, returns all registered Fosters. Allows filters. </remarks>
        /// <param name="searchString">pass an optional search string for looking up Fosters</param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="fromDate">Specifies the first date to return in a query</param>
        /// <param name="toDate">Specifies the last date to include in a query</param>
        /// <response code="200">search results matching specified criteria</response>
        /// <response code="400">bad input parameter</response>
        IActionResult SearchFosters([FromQuery]string searchString, [FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate);

        /// <summary>
        /// searches inventory
        /// </summary>
        /// <remarks>By passing in the appropriate options, you can search for available inventory in the system </remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="searchString">pass an optional search string for looking up inventory</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult SearchInventory([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]string searchString);

        /// <summary>
        /// searches Organization
        /// </summary>
        /// <remarks>With no parameters, returns all Organizations associated with the Rescue. Allows filters. </remarks>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="fromDate">Specifies the first date to return in a query</param>
        /// <param name="toDate">Specifies the last date to include in a query</param>
        /// <param name="name">Specifies a matching pattern for the name</param>
        /// <param name="gender">Specifies on of the valid Gender</param>
        /// <response code="200">ok</response>
        /// <response code="204">no results found</response>
        /// <response code="400">bad request - check parameter format</response>
        /// <response code="401">unauthorized request for this user</response>
        IActionResult SearchOrganization([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate, [FromQuery]DateTime? name, [FromQuery]string gender);

        /// <summary>
        /// searches volunteers
        /// </summary>
        /// <remarks>With no parameters, returns all registered Volunteers. Allows filters. </remarks>
        /// <param name="searchString">pass an optional search string for looking up Fosters</param>
        /// <param name="limit">Limits the number of items on a page</param>
        /// <param name="offset">Specifies the page number of the artists to be displayed</param>
        /// <param name="fromDate">Specifies the first date to return in a query</param>
        /// <param name="toDate">Specifies the last date to include in a query</param>
        /// <response code="200">search results matching specified criteria</response>
        /// <response code="400">bad input parameter</response>
        IActionResult SearchVolunteers([FromQuery]string searchString, [FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate);

        /// <summary>
        /// updates a Cat by id
        /// </summary>
        /// <remarks>Updates an existing Cat by id</remarks>
        /// <param name="body">unique id of Cat to update</param>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult UpdateCatById([FromBody]Cat body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Dog by id
        /// </summary>
        /// <remarks>Updates an existing Dog by id</remarks>
        /// <param name="body">unique id of Dog to update</param>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult UpdateDogById([FromBody]Dog body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Donor by id
        /// </summary>
        /// <remarks>Updates an existing Donor by id</remarks>
        /// <param name="body">unique id of Donor to update</param>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult UpdateDonorById([FromBody]Donor body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Foster by id
        /// </summary>
        /// <remarks>Updates an existing Foster by id</remarks>
        /// <param name="body">unique id of Foster to update</param>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult UpdateFosterById([FromBody]Foster body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>Updates an existing Kennel by id</remarks>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult UpdateKennelById([FromBody]Kennel body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Kennel by id
        /// </summary>
        /// <remarks>Updates an existing Kennel in a Room by id</remarks>
        /// <param name="body">partial json object of Kennel with fields to patch</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <param name="kennelId"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult UpdateKennelInRoomById([FromBody]Kennel body, [FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromRoute][Required]Guid? roomId, [FromRoute][Required]Guid? kennelId);

        /// <summary>
        /// updates a Location by id
        /// </summary>
        /// <remarks>Updates an existing Location by id</remarks>
        /// <param name="body">unique id of Location to update</param>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult UpdateLocationById([FromBody]Location body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Organization by id
        /// </summary>
        /// <remarks>Updates an existing Organization by id</remarks>
        /// <param name="body">unique id of Organization to update</param>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult UpdateOrganizationById([FromBody]Organization body, [FromRoute][Required]Guid? id);

        /// <summary>
        /// updates a Room by id
        /// </summary>
        /// <remarks>Updates an existing Room by id</remarks>
        /// <param name="body">unique id of Room to update</param>
        /// <param name="locationId"></param>
        /// <param name="buildingId"></param>
        /// <param name="roomId"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult UpdateRoomInBuildingById([FromBody]Room body, [FromRoute][Required]Guid? locationId, [FromRoute][Required]Guid? buildingId, [FromRoute][Required]Guid? roomId);

        /// <summary>
        /// updates a Volunteer by id
        /// </summary>
        /// <remarks>Updates an existing Volunteer by id</remarks>
        /// <param name="body">unique id of Volunteer to update</param>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="401">unauthorized request</response>
        IActionResult UpdateVolunteerById([FromBody]Volunteer body, [FromRoute][Required]Guid? id);
    }
}
